// MouseMgr.cpp : implementation file
//
#include "stdafx.h"

#include "MMgrDll.h"
////////////////////
#include "curdef.h"
#include "MMgrrsrc.h"
////////////////////
#include "MouseMgr.h"


#ifdef _DEBUG
#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
#endif
/////////////////////////////////////////////////// resource switch
extern AFX_EXTENSION_MODULE NEAR extensionMMgr_DLL;
/////////////////////////////////////////////////////////////////////////////
// CElemObj

IMPLEMENT_SERIAL(CMouseMgr,CObject,1)
/*
BEGIN_MESSAGE_MAP(CMouseMgr,CObject)
//BEGIN_MESSAGE_MAP
	//{{AFX_MSG_MAP(CMouseMgr)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()
*/ 
////////////////////////////
CMouseMgr::CMouseMgr()
{
#ifdef _AFXDLL
	CString strRes;
	HINSTANCE hInstResourceClient = AfxGetResourceHandle();
	AfxSetResourceHandle(extensionMMgr_DLL.hModule); // uses client's instance handle 
	strRes.LoadString(IDS_CHECK_RESOURCE);
	TRACE("resource string = %s\n", (const char*) strRes); 
#endif

	m_hCross   		= AfxGetApp()->LoadStandardCursor(IDC_CROSS);
	m_hUpArrow 		= AfxGetApp()->LoadStandardCursor(IDC_UPARROW);
	m_hDoubleArrow 	= AfxGetApp()->LoadStandardCursor(IDC_SIZE);
	m_hHand_12 		= AfxGetApp()->LoadCursor(IDC_CUR12);
	m_hHand_23 		= AfxGetApp()->LoadCursor(IDC_CUR23);
	m_hHand_31 		= AfxGetApp()->LoadCursor(IDC_CUR31);
	m_hHand_ISO		= AfxGetApp()->LoadCursor(IDC_CURISO);
	m_hText    		= AfxGetApp()->LoadCursor(IDC_CURTEXT);
	//////////////////////////////////////////////////////////////
#ifdef _AFXDLL
	AfxSetResourceHandle(hInstResourceClient); // restores client's instance handle
	strRes.LoadString(IDS_CHECK_RESOURCE);
	TRACE("resource string = %s\n", (const char*) strRes); 
#endif

}
CMouseMgr::~CMouseMgr()
{
	DestroyCursor(m_hCross);
	DestroyCursor(m_hUpArrow);
	DestroyCursor(m_hDoubleArrow);
	DestroyCursor(m_hHand_12);
	DestroyCursor(m_hHand_23);
	DestroyCursor(m_hHand_31);
	DestroyCursor(m_hHand_ISO);
	DestroyCursor(m_hText);

}
LPOINT3 CMouseMgr::GetStatusMouseWIC()
{
	return m_StatusMouseWIC;
}

void CMouseMgr::SetStatusMouseWIC(LPOINT3 StatWIC)
{
	m_StatusMouseWIC.x = StatWIC.x;
	m_StatusMouseWIC.y = StatWIC.y;
	m_StatusMouseWIC.z = StatWIC.z;
}

void CMouseMgr::SetViewCursor(int nType)
{

	///////////////////////////////////////////// Cursor
	UINT uType = (UINT)nType;
	/////////////////////////
	switch(uType)
	{
	
		case CROSS :
			::SetCursor(m_hCross);
			return;
			
		case DOUBLEARROW :
			::SetCursor(m_hDoubleArrow);
			return;
			
		case UPARROW :
			::SetCursor(m_hUpArrow);
			return;
			
		case HAND_12 :
			::SetCursor(m_hHand_12);
			return;
			
		case HAND_23 :
			::SetCursor(m_hHand_23);
			return;
			
		case HAND_31 :
			::SetCursor(m_hHand_31);
			return;
			
		case HAND_ISO:
			::SetCursor(m_hHand_ISO);
			return;
			
		case HAND_TEXT :
			::SetCursor(m_hText);
			return;
			
		default :
			break;
			
	}
    ////////////////////////////////////       
    return;
           
}		

CELMouse* CMouseMgr::GetELMouse(int nView)
{ 

	switch (nView)
	{
		case VIEW12:
		
    		return GetELMouse12();
    		       
		case VIEW23:
		
    		return GetELMouse23();
    		
		case VIEW31:
		
    		return GetELMouse31();
    		
		case VIEWISO:
		
    		return GetELMouseIso();
    		
		default:
		
			break;
	}		    		
	///////////////
	return (CELMouse*)NULL;
	///////////////    
}

CDBMouse* CMouseMgr::GetDBMouse(int nView)
{ 

	switch (nView)
	{
		case VIEW12:
		
    		return GetDBMouse12();
    		       
		case VIEW23:
		
    		return GetDBMouse23();
    		
		case VIEW31:
		
    		return GetDBMouse31();
    		
		case VIEWISO:
		
    		return GetDBMouseIso();
    		
		default:
		
			break;
	}		    		
	///////////////
	return (CDBMouse*)NULL;
	///////////////    
}
 
// CMouseMgr serialization

void CMouseMgr::Serialize(CArchive& ar)
{

	
    //////////////////////////////////////
	CObject::Serialize( ar);              // must call base class Serializer
	////////////////////////////
	if (ar.IsStoring())
	{
		TRACE(" MouseMgr	:Storing\n");	// TODO: add storing code here 
		ar.Write(/*LPOINT3*/&m_StatusMouseWIC, sizeof(LPOINT3));

	}
	else
	{
		TRACE(" MouseMgr	:Loading\n");	// TODO: add loading code here
		ar.Read(/*LPOINT3*/&m_StatusMouseWIC, sizeof(LPOINT3));
	}
	////////////////////////////////////////////// Mouse
	GetELMouse12()->Serialize(ar);
	GetDBMouse12()->Serialize(ar);
	GetELMouse23()->Serialize(ar);
	GetDBMouse23()->Serialize(ar);
	GetELMouse31()->Serialize(ar);
	GetDBMouse31()->Serialize(ar);
	GetELMouseIso()->Serialize(ar);
	GetDBMouseIso()->Serialize(ar);
	
}
////////////////////// End of Module ////////////////////


