// Mp_Xtrud.cpp : implementation file
//


#include "stdafx.h"
#include "math.h"
#include <time.h>
#include <stdio.h>

#include "Def_Objs.h"
//////////////////// 
#include "3dMath.h" 

#include "drgraf.h"
/////////////////////
#include "drgradoc.h"
#include "ObjMgr.h"
#include "NewObjs.h"
#include "DListMgr.h"
#include "Def_MouseAct.h"
///////////////////// dialogMgr
//#include "MPatMgr.h"
//#include "dlg_xtrd.h"
///////////////////// elements
#include "Def_IGen.h"
#include "DrNode.h"
#include "DrCurve.h"
#include "DrPatch.h"
///////////////////// SpecObjs
#include "Def_Spec.h"
#include "drpen.h"
#include "Layer.h"
/////////////////////
#include "PA_Xtrud.h"
 
#include "MP_Xtrud.h" 

#ifdef _DEBUG
#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
#endif

#define MIN_CNODES_CURVE	4
#define MIN_CNODES_PATCH	16
////////////////////////////////////
IMPLEMENT_SERIAL(CMP_Xtrud,CMI_GangP,1)
////////////////////////////////////
CMP_Xtrud::CMP_Xtrud()
{
	m_nExtruType = 1;	// default
}

CMP_Xtrud::~CMP_Xtrud()
{
}

int CMP_Xtrud::SetInfoBase_Type2
//////////////////////////////////////////////////////////////////
//				Given: 3 Lenths (wLen) to Extrude to
//////////////////////////////////////////////////////////////////
				(
					CString&						PatchID,		
					CDrPatch*						pDrPatch,
					CDListMgr*						pCurveList,
					CList<CURVELATCH,CURVELATCH>*	pLatchList,
					CDListMgr*						pNodeList,
					CList<int,int>*					pElperSegList,
					WORLD							wLen,
					double							Ratio,
					CView*							pView
				) 
{
	int index;
	////////////////////////////////////////////////////////// Dialog Info(Don't Display Dlg)
	if(pCurveList->GetCount() != 1)
	{
		AfxMessageBox("INTERNAL PROBLEM:\nCMP_Xtrud::SetInfoBase\npCurveList->GetCount() != 1");
		return MA_ERROR;
	}
	CDrCurve* pDrCurve	= (CDrCurve*)(pCurveList->GetObject(0) );
	////////////////////////////////////////////////// Latch
	if(pLatchList->GetCount() != 1)
	{
		AfxMessageBox("INTERNAL PROBLEM:\nCMP_Xtrud::SetInfoBase\npLatchList->GetCount() != 1");
		return MA_ERROR;
	}
	////////////////////////////////////////////////// Mesh
	if(pElperSegList->GetCount() != 1)
	{
		AfxMessageBox("INTERNAL PROBLEM:\nCMP_Xtrud::SetInfoBase\npElperSegList->GetCount() != 1");
		return MA_ERROR;
	}
	///////////////////////////////// Detach (It is Reciprocated in SetInfoDataBase )
	index			= pDrCurve->GetPatchList()->GetObjectIndex(pDrPatch);
	if(index>=0)
		pDrCurve->GetPatchList()->RemoveObject(index);
	////////////////////
	m_nExtruType	= 2;
	m_PatchID		= PatchID;
	m_pCurve_S[0]	= pDrCurve;
	m_CuLatch[0]	= pLatchList->GetHead();
	m_nMesh			= pElperSegList->GetHead();
	m_wLen			= wLen;
	m_Ratio			= Ratio;
	////////////////////////////////////////////////// Fill Info
	SetInfoForDataBase(pDrPatch);
	/////////////////////
	return MA_OK;		 
}

int CMP_Xtrud::SetInfoBase
//////////////////////////////////////////////////////////////////
//				Given: Extrusion Direction Nodes(NodeList) 
//////////////////////////////////////////////////////////////////
				(
					CString&						PatchID,		
					CDrPatch*						pDrPatch,
					CDListMgr*						pCurveList,
					CList<CURVELATCH,CURVELATCH>*	pLatchList,
					CDListMgr*						pNodeList,
					CList<int,int>*					pElperSegList,
					double							dLen,
					double							Ratio,
					CView*							pView
				) 
{
	int index;
	////////////////////////////////////////////////// CurveID
	if(pCurveList->GetCount() != 1)
	{
		AfxMessageBox("INTERNAL PROBLEM:\nCMP_Xtrud::SetInfoBase\npCurveList->GetCount() != 1");
		return MA_ERROR;
	}
	CDrCurve* pDrCurve	= (CDrCurve*)(pCurveList->GetObject(0) );
	////////////////////////////////////////////////// Latch
	if(pLatchList->GetCount() != 1)
	{
		AfxMessageBox("INTERNAL PROBLEM:\nCMP_Xtrud::SetInfoBase\npLatchList->GetCount() != 1");
		return MA_ERROR;
	}
	////////////////////////////////////////////////// FromNodeID & ToNodeID 
	if(pNodeList->GetCount() != 2)
	{
		AfxMessageBox("INTERNAL PROBLEM:\nCMP_Xtrud::SetInfoBase\npNodeList->GetCount() != 2");
		return MA_ERROR;
	}
	////////////////////////////////////////////////// Mesh
	if(pElperSegList->GetCount() != 1)
	{
		AfxMessageBox("INTERNAL PROBLEM:\nCMP_Xtrud::SetInfoBase\npElperSegList->GetCount() != 1");
		return MA_ERROR;
	}
	///////////////////////////////// Detach (It is Reciprocated in SetInfoBase of Dlg)
	index				= pDrCurve->GetPatchList()->GetObjectIndex(pDrPatch);
	if(index>=0)
		pDrCurve->GetPatchList()->RemoveObject(index);
	////////////////////////////////////////////////////////// Dialog Info(Don't Display Dlg)
	m_nExtruType	= 1;
	m_PatchID		= PatchID;
	m_pCurve_S[0]	= pDrCurve;
	m_CuLatch[0]	= pLatchList->GetHead();
	m_pFromIDNode	= (CDrNode*)(pNodeList->GetObject(0) );
	m_pToIDNode		= (CDrNode*)(pNodeList->GetObject(1) );
	m_nMesh			= pElperSegList->GetHead();
	m_dLen			= dLen;
	m_Ratio			= Ratio;
	///////////////////////////////// Detach (It is Reciprocated in SetInfoBase of Dlg)
	index			= m_pFromIDNode->GetPatchList()->GetObjectIndex(pDrPatch);
	if(index>=0)
		m_pFromIDNode->GetPatchList()->RemoveObject(index);
	///////////////////////////////// Detach (It is Reciprocated in SetInfoBase of Dlg)
	index			= m_pToIDNode->GetPatchList()->GetObjectIndex(pDrPatch);
	if(index>=0)
		m_pToIDNode->GetPatchList()->RemoveObject(index);
	////////////////////////////////////////////////// Fill Info
	SetInfoForDataBase(pDrPatch);
	///////////////////////////////
	return MA_OK;		 
}

int CMP_Xtrud::GoDoIt(CDrPatch* pDrPatch) 
{

	//////////////////////////////////////////////////////////
	GetInfo(pDrPatch);
	m_pDrPatch = pDrPatch;
	//////////////////////////////////	
	m_pCNodeList 	= m_pDrPatch->GetCNodeList();	
	///////                    				// ControlNode Mesh
	Extrude();
	////////////////////////
	m_PatchType = PA_TENSOR;
	////////////////////////
	if(InsertMeshInfo(FALSE)<0)
		return MA_ERROR;
	/////////////////////
	return MA_OK;
}
/*
CDrPatch* CMP_Xtrud::GoDoIt() 
{
	//////////////////////////////////////////////////////////
	m_pDrPatch 		= GetInfo();       // PGen Dialog
	////////////////////////////////
	if(!m_pDrPatch)		// cancel
		return (CDrPatch*)NULL;
	//////////////////////////////////	
	m_pCNodeList 	= m_pDrPatch->GetCNodeList();	
	///////                    				// ControlNode Mesh
	Extrude();
	////////////////////////
	m_PatchType = PA_TENSOR;
	////////////////////////
	if(InsertMeshInfo(FALSE)<0)
		return (CDrPatch*)NULL;
	/////////////////////
	return m_pDrPatch;
}			

CDrPatch* CMP_Xtrud::GetInfo()
{
	CDrGrafDoc* pDoc 		= ((CDrGrafApp*)AfxGetApp())->GetDocument(); 
	CObjectMgr* pObjectMgr 	= pDoc->GetObjectMgr();
	CDListMgr* pDListMgr 	= pObjectMgr->GetObjectList(PATCH);
	//////////////////////////////////////////////////////////////////
	CMPatMgr 	MPatMgr;
	CMPatMgr* 	pMPatMgr = &MPatMgr;
	CString		Cid;
	int 		index;
	///////////////////////////////////////////////////
	if (pMPatMgr->DoModal_Patch_Extrude(&Cid,4) == IDCANCEL)
			return (CDrPatch*)NULL;
    /////////////////////////////////////////////////////// update
	m_CurrentPatchID 	= Cid;
	index 				= pObjectMgr->
							GetObjectIndexfromKey(PATCH,Cid,1);
	if(index>=0)
	{						
		CDrPatch* pDrPatch	= (CDrPatch*)(pDListMgr->GetObject(index));
   		//////////////////////////////
		m_PatchProc		= pDrPatch->GetPatchProc();
		m_pNum_t_T		= pDrPatch->GetNum_tPointer_T();
		m_pDis_t_T		= pDrPatch->GetDis_tPointer_T();
//		m_CurveID_S[0]	= pDrPatch->GetCurveID(0);
		m_pCurve_S[0]	= pDrPatch->GetCurvePtr(0);	// XSec
		m_CuLatch[0]	= pDrPatch->GetCurveLatch(0);
		/////////
		if(m_nExtruType == 1)
		{
			m_pFromIDNode 	= pDrPatch->GetFromIDNode_T();
			m_pToIDNode		= pDrPatch->GetToIDNode_T();
			m_dLen			= pDrPatch->GetLength_T();
		}
		else
		if(m_nExtruType == 2)
		{
			m_wLen			= pDrPatch->GetWorldLength_T();
		}
		/////////
		m_nSegs_T		= pDrPatch->GetSegmentCount_T();	//segs in Extrusion dirn
		m_Ratio			= pDrPatch->GetRatio_T();
		m_bUnifOT		= pDrPatch->IsUniform_T();
		m_nOut_T		= pDrPatch->GetMaxOutPts_T();;
		m_nOrder_T		= pDrPatch->GetOrder_T();
		m_CurveType_T	= pDrPatch->GetCurveType_T();;
		m_nDim_T		= pDrPatch->GetnDim_T();
		m_bClosed_T		= pDrPatch->IsClosed_T();					// for Extrusion
		///////////////////////////////////////// Bezier Linear
		if(m_bUnifOT)
			m_nOut_TCon	= 2;// Only One Patch in T-dir
		else
//4/26/96			m_nOut_TCon	= pDrPatch->GetMaxOutSeg_T()+1;	// Number of Output Segments
			m_nOut_TCon	= m_nSegs_T+1;	// Number of Output Segments
		/////////////////////////////////////
		m_nSegs_TCon		= m_nOut_TCon - 1;
		m_nMaxPatchCNodes_T = m_nOut_TCon;
		////////////////
		return pDrPatch;
	}
	else 
		return (CDrPatch*)NULL;
}			
*/
int CMP_Xtrud::GetInfo(CDrPatch* pDrPatch)
{
	//////////////////////////////
	m_PatchProc		= pDrPatch->GetPatchProc();
	m_pNum_t_T		= pDrPatch->GetNum_tPointer_T();
	m_pDis_t_T		= pDrPatch->GetDis_tPointer_T();
//	m_CurveID_S[0]	= pDrPatch->GetCurveID(0);
	m_pCurve_S[0]	= (CDrCurve*)pDrPatch->GetCurveList()->GetObject(0);	// XSec
	m_CuLatch[0]	= pDrPatch->GetCurveLatch(0);
	/////////
	if(m_nExtruType == 1)
	{
//		m_FromID 		= pDrPatch->GetFromID_T();
//		m_ToID			= pDrPatch->GetToID_T();
		m_pFromIDNode 	= pDrPatch->GetFromIDNode_T();
		m_pToIDNode		= pDrPatch->GetToIDNode_T();
		m_dLen			= pDrPatch->GetLength_T();
	}
	else
	if(m_nExtruType == 2)
	{
		m_wLen			= pDrPatch->GetWorldLength_T();
	}
	/////////
	m_nSegs_T		= pDrPatch->GetSegmentCount_T();	//segs in Extrusion dirn
	m_Ratio			= pDrPatch->GetRatio_T();
	m_bUnifOT		= pDrPatch->IsUniform_T();
	m_nOut_T		= pDrPatch->GetMaxOutPts_T();;
	m_nOrder_T		= pDrPatch->GetOrder_T();
	m_CurveType_T	= pDrPatch->GetCurveType_T();;
	m_nDim_T		= pDrPatch->GetnDim_T();
	m_bClosed_T		= pDrPatch->IsClosed_T();					// for Extrusion
	///////////////////////////////////////// Bezier Linear
	if(m_bUnifOT)
		m_nOut_TCon	= 2;// Only One Patch in T-dir
	else
//4/26/96			m_nOut_TCon	= pDrPatch->GetMaxOutSeg_T()+1;	// Number of Output Segments
		m_nOut_TCon	= m_nSegs_T+1;	// Number of Output Segments
	/////////////////////////////////////
	m_nSegs_TCon		= m_nOut_TCon - 1;
	m_nMaxPatchCNodes_T = m_nOut_TCon;
	////////////////
	return 0;
}			

int CMP_Xtrud::Extrude() 
{

	CDrGrafDoc* pDoc 		= ((CDrGrafApp*)AfxGetApp())->GetDocument(); 
	CObjectMgr* pObjectMgr 	= pDoc->GetObjectMgr();
	CDListMgr* pDListMgr 	= pObjectMgr->GetObjectList(CURVE);
	//////////////////////////////////////////////////////
	CDrCurve* pDrCurve;
	CString		CurveID;
//	BOOL		bPutinCNodeList = TRUE;
	BOOL		bPutinCNodeList = FALSE;	//051597
	int i;
	///////////////////////////////////////// Generate CurvePts
/*
   	CurveID = m_CurveID_S[0];
	//////////////////////////////////////// get Curve Info	
	int index	= pObjectMgr->
					GetObjectIndexfromKey(CURVE,CurveID,1);
	if(index<0)
	{
		AfxMessageBox("CMP_Xtrud::Extrude\nCurveIndex Failure!");
		return -1;
	}
	////////////////////////////////////
	CDrCurve* pDrCurve	= (CDrCurve*)(pDListMgr->GetObject(index));
*/
	pDrCurve	= m_pCurve_S[0];
	if(!pDrCurve)
		return -1;
	/////////////////
	GetInfo_Curve(pDrCurve);
	/////////////////////////////////////////// Memory ControlPts 
	m_pIn_S[0]		= FixMem((long)m_nMaxCurveCNodes_S);
	m_pInWts_S[0]	= FixMemD((long)m_nMaxCurveCNodes_S);
	if( !m_pIn_S[0] || !m_pInWts_S[0] )
	{
		AfxMessageBox("CMP_Xtrud::Curve\nFixMemforCNodes Failure!");
		return -1;
	}
	/////////////////////////// Store LOCAL Pos	
	m_bBack = FALSE;
	if(m_CuLatch[0] == CL_BACKWARD)
		m_bBack = TRUE;
	FillCNodesLOCAL(pDrCurve->GetCNodeList(),m_pWts_BZ_S,
		m_pIn_S[0],m_pInWts_S[0],m_nMaxCurveCNodes_S,bPutinCNodeList);
	////////////////////////////////// Save PatchInfo
	m_nOut				= (((long)m_nOut_S)*((long)m_nOut_T) );				
	m_nOutCon			= (((long)m_nOut_SCon)*((long)m_nOut_TCon) );				
	m_nMaxPatchCNodes	= (int)m_nOutCon;
	///////////////////////////////////////////////////////////////////
	if(m_nExtruType == 1)
	{
		///////////////////////////////////////// AxisVector from
    											// end nodes	
		UnitAxisFromEndNodes(0);
	}
	else
	if(m_nExtruType == 2)
	{
		///////////////////////////////////////// AxisVector from wLen
		m_dLen = UnitAxis_N_LenFromWorldLength();
	}
	/////////////////////////////////////////////////////////////////// Memory OutPts 
	m_pOut				= FixMem(m_nOutCon);
	m_pOutWts			= FixMemD(m_nOutCon);
	if( !m_pOut || !m_pOutWts )
	{
		AfxMessageBox("CMP_Xtrud::Extrude\nFixMem Failure!");
		return -1;
	}
	///////////////////////////////////////// Go Extrude 
	int nResult = GenerateCNodes();
	///////////////////////////////////////// Free InputCNodeMems
    for(i=0;i<4;i++)
    {
    	if(m_pIn_S[i])
    	{
			FreeMem(m_pIn_S[i]);
			FreeMemD(m_pInWts_S[i]);
			m_pIn_S[i] = NULL;
			m_pInWts_S[i] = NULL;
		}	
	}	
	//////////////// 
	if(nResult<0)	
		return -1;
	else	
		return 0;
	/////////////			 
}			

int CMP_Xtrud::GenerateCNodes()
{
	/////////////////////////////////////////////////////////
	//		RATIO business TAKEN CARE OF IN DLG_XTRD
	//			SO MAKE RATIO = 1
	////////////////////////////////////////////// 
	double ratio	= 1.0;
	/////////////////////
	int nOut		= (int)m_nOutCon;  // for now
	////////////////////////////////////////////// generate Patch Pts
	CPA_Xtrud	Xtrud;		 	   	
	int nOutActual	= Xtrud.ExtrudeCurve
			(
				m_dLen,			//	distance to the extended surface's end
				m_vAxis,		//	unit extrusion vector (direction)
				m_nSegs_TCon,	//	subdivision value (interior spaces)
				ratio,			//  Output Last/Ist ratio in T_Direction
				m_nOut_SCon,	//	number of input data points
				m_pIn_S[0],		//	input XSec curve dataPts
				m_pInWts_S[0],	//	input XSec curve Wts
				m_pOut,			//	Output ControlPts
				m_pOutWts		//	Output Wts array
			);	  
	////////////////////////////	
	if(nOutActual != nOut)
		return -1;
	else
		return 0;
												
}

void CMP_Xtrud::SetInfoForDataBase(CDrPatch* pDrObject)
{
	int i;
	///////////////////////////////////////
	CDrGrafDoc* pDoc 		= ((CDrGrafApp*)AfxGetApp())->GetDocument();
	CObjectMgr* pObjectMgr 	= pDoc->GetObjectMgr();
	///////////////////////////////////////////////
	CPrecision* pPrecision     	= (CPrecision*)pObjectMgr->GetSpecObject(PRECISION);
//	CScaleFactor* pScaleFactor 	= (CScaleFactor*)pObjectMgr->GetSpecObject(SCALEFACTOR);
	CMapFactor* pMapFactor     	= (CMapFactor*)pObjectMgr->GetSpecObject(MAPFACTOR); 
	CDrPen*	pDrPen			= (CDrPen*)pObjectMgr->GetSpecObject(DRPEN);
	CLayer* pLayer			= (CLayer*)pObjectMgr->GetSpecObject(LAYER);
	//////////////////////////////////////////////////// Update Current DrObject
	long  lWorldBase  = pPrecision->GetWorldBase(); 
    double dWorldBase = (double)lWorldBase;
    ///////////////////////////////////////////
	double dMapFactor   = pMapFactor->GetMapFactor();
	/////////////////////////////////////////////////////////////	
    pDrObject->SetObjectType((int)PATCH);
    pDrObject->SetElemType((int)GENR_OBJECT);          // globals
    pDrObject->SetLevelType((int)LEVEL_GRAPA);          // globals
	pDrObject->SetPatchProc(PP_EXTRUDE);
	pDrObject->SetPatchType(PA_TENSOR);
	pDrObject->SetPatSubType(PS_QUADRILAT);
	pDrObject->SetOrder_T(2);					// k = LINEAR for extrusion
	pDrObject->SetCurveType_T(CP_LINEAR);		// k = LINEAR for extrusion
	pDrObject->SetnDim_T(4);		//Rational for use in circle and later in Solid 
	pDrObject->SetClosed_T(FALSE);				// k = LINEAR for extrusion
    //////////////////////////////
	pDrObject->SetObjectID(m_PatchID);
/*
	pDrObject->SetCurveID(m_pDrCurve->GetObjectID(),0);
	/////////////////////////////////
	CURVELATCH Latch[1];
	int i;
	for(i=0;i<1;i++)
		Latch[i] = CL_FORWARD;
	if(m_Orient_1 == "BACKWARD")
		Latch[0] = CL_BACKWARD;
	for(i=0;i<1;i++)
		pDrObject->SetCurveLatch(Latch[i],i);
*/
	pDrObject->SetCurveLatch(m_CuLatch[0],0);
	/////////////////////////////////////////////////////////////////// Reciprocate
	pDrObject->GetCurveList()->RemoveAll();
	//////////////////////////////////////
	m_pCurve_S[0]->GetPatchList()->InsertObject(pDrObject);
	pDrObject->GetCurveList()->InsertObject(m_pCurve_S[0]);
	/////////////////////////////////////////////////////////////////// Type_1: fromID,ToID,dLen
	pDrObject->SetExtruType_T(m_nExtruType);
	//
	if(m_nExtruType == 1)
	{
		////////////////////////////////////////// Reciprocate
		m_pFromIDNode->GetPatchList()->InsertObject(pDrObject);
		pDrObject->SetFromIDNode_T(m_pFromIDNode);
		///
		m_pToIDNode->GetPatchList()->InsertObject(pDrObject);
		pDrObject->SetToIDNode_T(m_pToIDNode);
		/////////////////////////////////////////// strip Scale Factor (World Coord)
		pObjectMgr->SCtoDS(&m_dLen);
		m_dLen *= (dWorldBase/dMapFactor);
		///////////////////////////////
		pDrObject->SetLength_T(m_dLen);
	}
	else
	/////////////////////////////////////////////////////////////////// Type_2: wLen
	if(m_nExtruType == 2)
	{
		/////////////////////////////////////////// strip Scale Factor (World Coord)
		pObjectMgr->SCtoDS(&m_wLen.x);
		pObjectMgr->SCtoDS(&m_wLen.y);
		pObjectMgr->SCtoDS(&m_wLen.z);
		m_wLen.x *= (dWorldBase/dMapFactor);
		m_wLen.y *= (dWorldBase/dMapFactor);
		m_wLen.z *= (dWorldBase/dMapFactor);
		///////////////////////////////
		pDrObject->SetWorldLength_T(m_wLen);
	}
	////////////////////////////////////////////////////////////////////
	pDrObject->NumberOfElements(P_EXTRUDE,1/*int nElemType*/); // temp:1=LINE
//	pDrObject->SetSegs(m_nSegs);
	//////////////////////////////////////////////////////////////////////////////// Mesh(Output)
	pDrObject->SetOutMethod_T(PA_HORNER);		// Output Method
	///////////////////////////////////////////////////////////// ReDistribute 
	if(m_Ratio == 1.0)
		m_bUnifOT = TRUE;
	else			
		m_bUnifOT = FALSE;
	//////////////////////	
	pDrObject->SetRatio_T(m_Ratio);					
	pDrObject->SetUniform_T(m_bUnifOT);		// Output Distribution:
	///////////////////////////////////////// save
	//			 	in Inter_C1: make One Segment of Control Nodes
	//				with m_nMesh Output segment in it, i.e.,
	//				1 Segment in T-direction
	/////////////////////////////////////////////////////////////////////
	m_pOSeg = new int[1];
	m_pODis = new double[m_nMesh+1];
	/////////////////////
	m_pOSeg[0] = m_nMesh;
	/////////////////////
	if(m_bUnifOT)			// Uniform and OK
	{
		///////////////////////////////
		double delt;
		delt	= 1.0/m_nMesh;
		////////////////
		m_pODis[0] = 0.;
		////////////////
		for (i=1;i<=m_nMesh;i++)
		{
			m_pODis[i] = m_pODis[i-1] + delt;
		}
		/////////////////////
	}
	else								// NonUniform
	{
		/////////////////////////////////////////////////////////
		// NOTE:	allows Unequal Generation
		//		# of Segments = n + 1			= nSegs 
		//		SPACEs between pts. are:
		//			x, x+a, x+2a, x+3a, ..., x+na
		//		with
		//			x = 2/(segs*(ratio+1))
		//			a = (x*(ratio-1))/(segs-1)
		//
		//////////////////////////////////////////////////////////
		double x	= 2./(m_nMesh * (m_Ratio + 1));
		double a	= (m_nMesh == 1)?0.:(x * (m_Ratio-1))/(m_nMesh-1);
		//////////////////////////// save
		int i;
		//////
		m_pODis[0] = 0.;
		////////////////
		for (i=0;i<m_nMesh;i++)
		{
			///////////////////
			m_pODis[i+1] = m_pODis[i] + x + i * a;
			///////////////////
		}
	}
	//////////////////////////////////////////		 
	pDrObject->SetMaxOutSeg_T(m_nMesh);	// Number of Output Segments
	pDrObject->SetSegmentCount_T(1); 	// for Old Compatibility per patch
	pDrObject->SetNum_tPointer_T(m_pOSeg);	// Number of Outputs for
												// each Curve Segment
	pDrObject->SetDis_tPointer_T(m_pODis);	// Number of Outputs for
												// each Curve Segment
	////////////////////////////////////////////// Total Evaluation Pts
	int nOut = m_nMesh + 1;
	///////////////////////
	pDrObject->SetMaxOutPts_T(nOut);
	pDrObject->SetOut_T(nOut);
	////////////////////////////////////////////////	
	pDrObject->SetPenInfo(pDrPen->GetWidth(),pDrPen->GetColor(),pDrPen->GetStyle());
	pDrObject->SetLayer(pLayer->GetCurrentLayer());
	//////////////////
	return;
	
} 

void CMP_Xtrud::Serialize(CArchive& ar)
{

	CMI_GangP::Serialize( ar);              // must call base class Serializer
	/////////////////////////
	////////////////////////////
	if (ar.IsStoring())
	{
		TRACE(" CMP_Xtrud:    Storing\n");	
		
 			/////////////////////////////////////////////////
 			//////////////////////////////

	}
	else
	{
		TRACE(" CMP_Xtrud:    Loading\n");	

			/////////////////////////////////////////////////
 		//////////////////////////////
	
	}        
	//////////////////
}
//////////////////////////////////// end of module ////////////////////////////
