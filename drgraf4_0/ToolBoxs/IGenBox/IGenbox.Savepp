// Elembox.cpp : implementation file
//
#include "stdafx.h"
///////////////////// Old ToolBar Utility from MFC (VC++1.5)
#include "OldGlob.h"
#include "OldTool.h"
/////////////////////
#include "drgraf.h"
#include "drgrafrm.h"
#include "UserMsg.h"
/////////////////////
#include "palette.h"
#include "IGenButt.h"
#include "BoxWndID.h"
#include "BoxBMPID.h"
#include "IGenRsrc.h"	// DLL specific
/////////////////////
#include "Def_IGen.h"   // Operations
#include "Def_Supp.h"   // Operations
#include "Def_StaL.h"   // Operations
#include "Def_SpeL.h"   // Operations
#include "Def_DynL.h"   // Operations
#include "Def_Mo.h"   // Operations
#include "Ext_Mo.h"
#include "Def_MoBox.h"
#include "IGenbox.h" 

#ifdef _DEBUG
#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
#endif
/////////////////////////////////////////////////// resource switch
extern AFX_EXTENSION_MODULE NEAR extensionIGen_DLL;
/////////////////////////////////////////////////////////////////////////////
BEGIN_MESSAGE_MAP(CIGenBox, CWnd)
	//{{AFX_MSG_MAP(CIGenBox)
	ON_WM_CREATE()
	ON_WM_PAINT()  
	ON_WM_MOUSEACTIVATE()
	ON_WM_DESTROY()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP() 

IMPLEMENT_DYNAMIC(CIGenBox,CWnd)
/////////////////////////////////////////////////////////////////////////////
//array ofIDs Used to Initialize Elembar

static UINT BASED_CODE elembox[] =
{
	// same order as in the bitmap 'Elembox.bmp'
	IDB_NODE,
	IDB_CURVE,
	IDB_PATCH,
	IDB_SOLID,
	IDB_OBJ3D

	
}; 

/////////////////////////////////////////////////////////////////////////////
// CIGenBox
CIGenBox::CIGenBox()
{ 
	m_nElemBarColMax 	= EB_MAX_BUTT_COL;	  // ElemBar Column 
	m_nElemBarRowMax	= 1;
	m_nActiveTool		= -1;             // None Selected                               //temorary
	m_nActiveElemObject	= -1;             // None Selected                               //temorary
    //////////////////////////////////    // map ToolIndex to ToolNumber
	FillToolNumArray();
	///////////////////
}                    

CIGenBox::~CIGenBox()
{
}
/////////////////////////////////////////////////////////////////////////////
// CIGenBox message handlers
int CIGenBox::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	if (CWnd::OnCreate(lpCreateStruct) == -1)
		return -1; 
	
	// TODO: Add your specialized creation code here
	/////////////////////////////////////////////////// ElemBar creation
	if (!CreateElemBar())
	{	
		AfxMessageBox("CIGenBox::OnCreate\nCannot Create ElemBar");
		return -1;
    }
	
	m_wndElemBar.ShowWindow((m_wndElemBar.GetStyle() & WS_VISIBLE) == 0);
    /////////////////////////////////////////////////// set Height/Width
//   	UINT width  = 5 + 1 + m_nElemBarColMax*EB_BNSIZE_CX + 3 + 1;
   	UINT width  = m_nElemBarColMax*EB_BNSIZE_CX;
   	////////////////
   	SetWidth(width);
   	/////////////////
//+   	UINT height = 2*EB_CAP_ETC_SIZE + 10;                  // caption etc.
//   	UINT height = 10;                  // border etc.
//   	height +=    m_nElemBarRowMax*EB_BNSIZE_CY;//
   	UINT height = m_nElemBarRowMax*EB_BNSIZE_CY;//
	///////////////////
	SetHeight(height);
	//////////////////////////////////////////////////////////////////    
	////////////////////////////////////////////////// Secondary Boxes
	CRect BoxRect;
	BoxRect.left = BoxRect.top = BoxRect.right = BoxRect.bottom = 0;
	/////////////////////////////////////////// NodeBox
	GetNodeBox()->Create((CWnd*)this,BoxRect);
	/////////////////////////////////////////// CurveBox
	GetCurveBox()->Create((CWnd*)this,BoxRect);
	/////////////////////////////////////////// PatchBox
	GetPatchBox()->Create((CWnd*)this,BoxRect);
	/////////////////////////////////////////// SolidBox
	GetSolidBox()->Create((CWnd*)this,BoxRect);
	/////////////////    
	return 0;
}

void CIGenBox::OnDestroy()
{
	CWnd::OnDestroy();
	/////////////////////////////////////////// CurveBox
	if(GetNodeBox()->m_hWnd != NULL)
		GetNodeBox()->DestroyWindow();
	/////////////////////////////////////////// CurveBox
	if(GetCurveBox()->m_hWnd != NULL)
		GetCurveBox()->DestroyWindow();
	/////////////////////////////////////////// PatchBox
	if(GetPatchBox()->m_hWnd != NULL)
		GetPatchBox()->DestroyWindow();
	/////////////////////////////////////////// SolidBox
	if(GetSolidBox()->m_hWnd != NULL)
		GetSolidBox()->DestroyWindow();
	////////////////////////////
	
	// TODO: Add your message handler code here
	
}
//////////////////////////////////////////////////////////////////////
BOOL CIGenBox::CreateElemBar()
{

	
	int     nLeft, nTop;     
	RECT	Rect;
	
	GetClientRect(&Rect);
	
	nLeft = Rect.left;       // ElemBar Left,Top
	nTop  = Rect.top;
	////////////////////////////////////////////////////////////////////
	m_nElemBarButtCount = sizeof(elembox)/sizeof(UINT); //EB_BUTT_COUNT 
	if(m_nElemBarButtCount != EB_BUTT_COUNT)
	{
		AfxMessageBox("ERROR:CIGenBox::CreateElemBar()\nButton Count Discrepancy");
		return FALSE;
	}
	////////////////////////////////////////////////////////////////////// 
	CString strRes;
//////////////////////////////////////////////////////////////////////////
/*
#ifdef _AFXDLL

	TRACE("In Elembox.Create\n");

	strRes.LoadString(IDS_CHECK_RESOURCE);
	TRACE("resource string = %s\n", (const char*) strRes);
	//////////////////////
	HINSTANCE hInstApp = AfxGetInstanceHandle(); // uses client's instance handle
	HINSTANCE hOldInst = AfxGetResourceHandle(); 
	///////////////
	AfxSetResourceHandle(hInstApp); // uses client's instance handle 
	strRes.LoadString(IDS_CHECK_RESOURCE);
	TRACE("resource string = %s\n", (const char*) strRes); 
	//////////////
	AfxSetResourceHandle(hOldInst); // resource handle back 
    //////////////
	HINSTANCE hInstResourceClient = AfxGetResourceHandle();
	AfxSetResourceHandle(extensionEBox_DLL.hModule); // uses client's instance handle 
	strRes.LoadString(IDS_CHECK_RESOURCE);
	TRACE("resource string = %s\n", (const char*) strRes); 
	AfxSetResourceHandle(hInstResourceClient); // restores client's instance handle
#endif	
*/
#ifdef _AFXDLL
	HINSTANCE hInstResourceClient = AfxGetResourceHandle();
	AfxSetResourceHandle(extensionIGen_DLL.hModule); // uses client's instance handle 
	strRes.LoadString(IDS_CHECK_RESOURCE);
	TRACE("resource string = %s\n", (const char*) strRes); 
#endif
/////////////////////////////////////////////////////////////////
	////////////////////////////////////////////			
	if (!m_wndElemBar.Create(this, nLeft, nTop,IDW_IGENBOX,IDC_BUTTON) ||
		!m_wndElemBar.LoadBitmap(IDB_IGENBOX) ||
		!m_wndElemBar.SetButtons(elembox,sizeof(elembox)/sizeof(UINT),m_nElemBarColMax) )
	{
		TRACE("CIGenBox::CreateElemBar()\nFailed to create toolbar\n");
		return FALSE;       // fail to create
	} 

#ifdef _AFXDLL
	AfxSetResourceHandle(hInstResourceClient); // restores client's instance handle
#endif

	//////////////////////////////////////////////// set Row Count
	m_nElemBarRowMax = m_nElemBarButtCount/m_nElemBarColMax;
	if(m_nElemBarButtCount%m_nElemBarColMax) m_nElemBarRowMax++;
	///////////////////////////////////////// set sizes / NO CAPTION
	CSize szButton,szImage;
	///////////////////////
	szButton.cx  = EB_BNSIZE_CX;
	szButton.cy  = EB_BNSIZE_CY; 
		
	szImage.cx   = EB_IMAGE_CX;
	szImage.cy   = EB_IMAGE_CY;
	///////////////////////
	m_wndElemBar.SetSizes(szButton,szImage,FALSE);
	///////////////////////////////////////////
	return TRUE;
}

void CIGenBox::OnPaint()
{

	///////////////
//?	return;      // do nothing
	///////////////

   CPaintDC dc(this); // device context for painting
	
   RECT    Rect;
   CPen    Pen;
   CBrush  Brush;
//   CBrush* PtrOldBrush;
	
// color background LightGray

   GetClientRect(&Rect);
   dc.FillRect(&Rect,Brush.FromHandle((HBRUSH)::GetStockObject(LTGRAY_BRUSH)) );

/*
// Create inner border rectangle

   	Rect.left   += 2;
   	Rect.top    += 2;
   	Rect.right  -= 2;
   	Rect.bottom -= 2;		

   	PtrOldBrush= (CBrush*)dc.SelectStockObject(NULL_BRUSH); 
  	dc.Rectangle(&Rect);
   	dc.SelectObject(PtrOldBrush); 
*/   	
   	Brush.DeleteObject();
	/////////////////////////////
			
}

/////////////////////////////////////////////////////////////////////////////
// CElemBar message handlers

int CIGenBox::OnMouseActivate(CWnd* pDesktopWnd, UINT nHitTest, UINT message)
{
	// TODO: Add your message handler code here and/or call default
	
	return MA_ACTIVATE;
}

void CIGenBox::GoRespondtoMouse()
{
	
	CDrGrafFrame* pWnd = (CDrGrafFrame*)(AfxGetApp()->m_pMainWnd);
	pWnd->SetIGenBoxStatus(TRUE);
	pWnd->SetCntlBoxStatus(FALSE);
	pWnd->SetDrawBoxStatus(FALSE);
	////////////////////////////////////////////////// Check If SecondaryBoxes
	CClientDC dc(this);
//	int ScreenWidth = dc.GetDeviceCaps(HORZRES);
	int ScreenHeight = dc.GetDeviceCaps(VERTRES);
	CRect BoxRect,ItemRect;;
	int BoxWidth,BoxHeight,index;
	////////////////////////////////////////////
	int nID 	= GetActiveElemObject(); 
	if(nID<0) return;
	//////////////////////////////
	UINT mID	= (UINT)nID;
	////////////////////////////////////////// get index 
	index = GetElemBar()->CommandToIndex(mID);
    ////////////////////////// Show PatchBox 
	GetElemBar()->GetItemRect(index,&ItemRect);
	ClientToScreen(&ItemRect);
	//////////////////////////
	UINT SubItem;
	/////////////
	switch(mID)
	{
		case NODE:
		{
			switch(m_ParentID)
			{

				/////////////////////// Elements
				case EDIM_0:	// fall thro'
				case EDIM_1:
				case EDIM_2:
				case EDIM_3:

					pWnd->SetMouseBoxType(NODEBOX);
					///////////////////////////////////////////// Box 
					BoxWidth  	= (int)GetNodeBox()->GetWidth();
					BoxHeight 	= (int)GetNodeBox()->GetHeight();
					//////////////////////////
					CalcBoxRect(BoxRect,ItemRect,BoxWidth,BoxHeight,ScreenHeight);
					//////////////////////////////////////////////////////////////
					if((GetCurveBox()->GetStyle()) & WS_VISIBLE)
						GetCurveBox()->ShowWindow(SW_HIDE);
					if((GetPatchBox()->GetStyle()) & WS_VISIBLE)
						GetPatchBox()->ShowWindow(SW_HIDE);
					if((GetSolidBox()->GetStyle()) & WS_VISIBLE)
						GetSolidBox()->ShowWindow(SW_HIDE);
					////////////
					GetNodeBox()->SetWindowPos(NULL,BoxRect.left,BoxRect.top,BoxRect.right-BoxRect.left,
                        BoxRect.bottom-BoxRect.top,SWP_NOZORDER|SWP_SHOWWINDOW);
					//////////////////////////////////////////////////////////////            
					return;
				/////////////////////// Support		 
				case SUPPORT_RIGID:
					SubItem = NSUP_RIGID; 
					break;
				case SUPPORT_LINSPRING:
					SubItem = NSUP_LINSPRING; 
					break;
				case SUPPORT_LINSNUBBER:
					SubItem = NSUP_LINSNUBBER;
					break;
				case SUPPORT_NLSPRING:
					SubItem = NSUP_NLSPRING;
					break;
				case SUPPORT_NLSNUBBER:
					SubItem = NSUP_NLSNUBBER;
					break;
				/////////////////////// Static
				case FORCE: 	
					SubItem = NSL_FORCE;
					break;
				case DISPLACE: 	
					SubItem = NSL_DISPLACE;
					break;
				case PRESSURE: 	
					SubItem = NSL_PRESSURE;
					break;
				case THERMAL: 	
					SubItem = NSL_THERMAL;
					break;
				case LUMPWT: 	
					SubItem = NSL_LUMPWT; 
					break;
				case GRAVITY: 	
					SubItem = NSL_LUMPWT; 
					break;
				/////////////////////// Spectra
				case SPL_FORCE: 	
					SubItem = NSPL_FORCE;
					break;
				case SPL_DISPLACE: 	
					SubItem = NSPL_DISPLACE;
					break;
				case SPL_VELOCITY: 	
					SubItem = NSPL_VELOCITY;
					break;
				case SPL_ACCEL: 	
					SubItem = NSPL_ACCEL;
					break;
				case SPL_PRESSURE: 	
					SubItem = NSPL_PRESSURE; 
					break;
				case SPL_THERMAL: 	
					SubItem = NSPL_THERMAL; 
					break;
				case SPL_LUMPMASS: 	
					SubItem = NSPL_LUMPMASS; 
					break;
				/////////////////////// History
				case HIS_FORCE: 	
					SubItem = NHIS_FORCE;
					break;
				case HIS_DISPLACE: 	
					SubItem = NHIS_DISPLACE;
					break;
				case HIS_VELOCITY: 	
					SubItem = NHIS_VELOCITY;
					break;
				case HIS_ACCEL: 	
					SubItem = NHIS_ACCEL;
					break;
				case HIS_PRESSURE: 	
					SubItem = NHIS_PRESSURE; 
					break;
				case HIS_THERMAL: 	
					SubItem = NHIS_THERMAL; 
					break;
				case HIS_LUMPMASS: 	
					SubItem = NHIS_LUMPMASS; 
					break;
			}
		}
		case CURVE:
		{
			switch(m_ParentID)
			{

				/////////////////////// Elements
				case EDIM_0:	// fall thro'
				case EDIM_1:
				case EDIM_2:
				case EDIM_3:

					pWnd->SetMouseBoxType(CURVEBOX);
					///////////////////////////////////////////// Box 
					BoxWidth  	= (int)GetCurveBox()->GetWidth();
					BoxHeight 	= (int)GetCurveBox()->GetHeight();
					//////////////////////////
					CalcBoxRect(BoxRect,ItemRect,BoxWidth,BoxHeight,ScreenHeight);
					//////////////////////////////////////////////////////////////
					if((GetNodeBox()->GetStyle()) & WS_VISIBLE)
						GetNodeBox()->ShowWindow(SW_HIDE);
					if((GetPatchBox()->GetStyle()) & WS_VISIBLE)
						GetPatchBox()->ShowWindow(SW_HIDE);
					if((GetSolidBox()->GetStyle()) & WS_VISIBLE)
						GetSolidBox()->ShowWindow(SW_HIDE);
					////////////
					GetCurveBox()->SetWindowPos(NULL,BoxRect.left,BoxRect.top,BoxRect.right-BoxRect.left,
                        BoxRect.bottom-BoxRect.top,SWP_NOZORDER|SWP_SHOWWINDOW);
					//////////////////////////////////////////////////////////////            
					return;
				/////////////////////// Support		 
				case SUPPORT_RIGID:
					SubItem = CSUP_RIGID; 
					break;
				case SUPPORT_LINSPRING:
					SubItem = CSUP_LINSPRING; 
					break;
				case SUPPORT_LINSNUBBER:
					SubItem = CSUP_LINSNUBBER;
					break;
				case SUPPORT_NLSPRING:
					SubItem = CSUP_NLSPRING;
					break;
				case SUPPORT_NLSNUBBER:
					SubItem = CSUP_NLSNUBBER;
					break;
				/////////////////////// Static
				case FORCE: 	
					SubItem = CSL_FORCE;
					break;
				case DISPLACE: 	
					SubItem = CSL_DISPLACE;
					break;
				case PRESSURE: 	
					SubItem = CSL_PRESSURE;
					break;
				case THERMAL: 	
					SubItem = CSL_THERMAL;
					break;
				case LUMPWT: 	
					SubItem = CSL_LUMPWT; 
					break;
				case GRAVITY: 	
					SubItem = CSL_LUMPWT; 
					break;
				/////////////////////// Spectra
				case SPL_FORCE: 	
					SubItem = CSPL_FORCE;
					break;
				case SPL_DISPLACE: 	
					SubItem = CSPL_DISPLACE;
					break;
				case SPL_VELOCITY: 	
					SubItem = CSPL_VELOCITY;
					break;
				case SPL_ACCEL: 	
					SubItem = CSPL_ACCEL;
					break;
				case SPL_PRESSURE: 	
					SubItem = CSPL_PRESSURE; 
					break;
				case SPL_THERMAL: 	
					SubItem = CSPL_THERMAL; 
					break;
				case SPL_LUMPMASS: 	
					SubItem = CSPL_LUMPMASS; 
					break;
				/////////////////////// History
				case HIS_FORCE: 	
					SubItem = CHIS_FORCE;
					break;
				case HIS_DISPLACE: 	
					SubItem = CHIS_DISPLACE;
					break;
				case HIS_VELOCITY: 	
					SubItem = CHIS_VELOCITY;
					break;
				case HIS_ACCEL: 	
					SubItem = CHIS_ACCEL;
					break;
				case HIS_PRESSURE: 	
					SubItem = CHIS_PRESSURE; 
					break;
				case HIS_THERMAL: 	
					SubItem = CHIS_THERMAL; 
					break;
				case HIS_LUMPMASS: 	
					SubItem = CHIS_LUMPMASS; 
					break;
			}
		}
			
		case PATCH:
		{
			switch(m_ParentID)
			{

				/////////////////////// Elements
				case EDIM_0:	// fall thro'
				case EDIM_1:
				case EDIM_2:
				case EDIM_3:

					pWnd->SetMouseBoxType(PATCHBOX);
					///////////////////////////////////////////// Box 
					BoxWidth  	= (int)GetPatchBox()->GetWidth();
					BoxHeight 	= (int)GetPatchBox()->GetHeight();
					//////////////////////////
					CalcBoxRect(BoxRect,ItemRect,BoxWidth,BoxHeight,ScreenHeight);
					//////////////////////////////////////////////////////////////
					if((GetNodeBox()->GetStyle()) & WS_VISIBLE)
						GetNodeBox()->ShowWindow(SW_HIDE);
					if((GetCurveBox()->GetStyle()) & WS_VISIBLE)
						GetCurveBox()->ShowWindow(SW_HIDE);
					if((GetSolidBox()->GetStyle()) & WS_VISIBLE)
						GetSolidBox()->ShowWindow(SW_HIDE);
					////////////
					GetPatchBox()->SetWindowPos(NULL,BoxRect.left,BoxRect.top,BoxRect.right-BoxRect.left,
                        BoxRect.bottom-BoxRect.top,SWP_NOZORDER|SWP_SHOWWINDOW);
					//////////////////////////////////////////////////////////////            
					return;
				/////////////////////// Support		 
				case SUPPORT_RIGID:
					SubItem = PSUP_RIGID; 
					break;
				case SUPPORT_LINSPRING:
					SubItem = PSUP_LINSPRING; 
					break;
				case SUPPORT_LINSNUBBER:
					SubItem = PSUP_LINSNUBBER;
					break;
				case SUPPORT_NLSPRING:
					SubItem = PSUP_NLSPRING;
					break;
				case SUPPORT_NLSNUBBER:
					SubItem = PSUP_NLSNUBBER;
					break;
				/////////////////////// Static
				case FORCE: 	
					SubItem = PSL_FORCE;
					break;
				case DISPLACE: 	
					SubItem = PSL_DISPLACE;
					break;
				case PRESSURE: 	
					SubItem = PSL_PRESSURE;
					break;
				case THERMAL: 	
					SubItem = PSL_THERMAL;
					break;
				case LUMPWT: 	
					SubItem = PSL_LUMPWT; 
					break;
				case GRAVITY: 	
					SubItem = PSL_LUMPWT; 
					break;
				/////////////////////// Spectra
				case SPL_FORCE: 	
					SubItem = PSPL_FORCE;
					break;
				case SPL_DISPLACE: 	
					SubItem = PSPL_DISPLACE;
					break;
				case SPL_VELOCITY: 	
					SubItem = PSPL_VELOCITY;
					break;
				case SPL_ACCEL: 	
					SubItem = PSPL_ACCEL;
					break;
				case SPL_PRESSURE: 	
					SubItem = PSPL_PRESSURE; 
					break;
				case SPL_THERMAL: 	
					SubItem = PSPL_THERMAL; 
					break;
				case SPL_LUMPMASS: 	
					SubItem = PSPL_LUMPMASS; 
					break;
				/////////////////////// History
				case HIS_FORCE: 	
					SubItem = PHIS_FORCE;
					break;
				case HIS_DISPLACE: 	
					SubItem = PHIS_DISPLACE;
					break;
				case HIS_VELOCITY: 	
					SubItem = PHIS_VELOCITY;
					break;
				case HIS_ACCEL: 	
					SubItem = PHIS_ACCEL;
					break;
				case HIS_PRESSURE: 	
					SubItem = PHIS_PRESSURE; 
					break;
				case HIS_THERMAL: 	
					SubItem = PHIS_THERMAL; 
					break;
				case HIS_LUMPMASS: 	
					SubItem = PHIS_LUMPMASS; 
					break;
			}
		}
			
		case SOLID:
		{
			switch(m_ParentID)
			{

				/////////////////////// Elements
				case EDIM_0:	// fall thro'
				case EDIM_1:
				case EDIM_2:
				case EDIM_3:

					pWnd->SetMouseBoxType(SOLIDBOX);
					///////////////////////////////////////////// Box 
					BoxWidth  	= (int)GetSolidBox()->GetWidth();
					BoxHeight 	= (int)GetSolidBox()->GetHeight();
					//////////////////////////
					CalcBoxRect(BoxRect,ItemRect,BoxWidth,BoxHeight,ScreenHeight);
					//////////////////////////////////////////////////////////////
					if((GetNodeBox()->GetStyle()) & WS_VISIBLE)
						GetNodeBox()->ShowWindow(SW_HIDE);
					if((GetCurveBox()->GetStyle()) & WS_VISIBLE)
						GetCurveBox()->ShowWindow(SW_HIDE);
					if((GetPatchBox()->GetStyle()) & WS_VISIBLE)
						GetPatchBox()->ShowWindow(SW_HIDE);
					////////////
					GetSolidBox()->SetWindowPos(NULL,BoxRect.left,BoxRect.top,BoxRect.right-BoxRect.left,
                        BoxRect.bottom-BoxRect.top,SWP_NOZORDER|SWP_SHOWWINDOW);
					//////////////////////////////////////////////////////////////            
					return;
				/////////////////////// Support		 
				case SUPPORT_RIGID:
					SubItem = SSUP_RIGID; 
					break;
				case SUPPORT_LINSPRING:
					SubItem = SSUP_LINSPRING; 
					break;
				case SUPPORT_LINSNUBBER:
					SubItem = SSUP_LINSNUBBER;
					break;
				case SUPPORT_NLSPRING:
					SubItem = SSUP_NLSPRING;
					break;
				case SUPPORT_NLSNUBBER:
					SubItem = SSUP_NLSNUBBER;
					break;
				/////////////////////// Static
				case FORCE: 	
					SubItem = SSL_FORCE;
					break;
				case DISPLACE: 	
					SubItem = SSL_DISPLACE;
					break;
				case PRESSURE: 	
					SubItem = SSL_PRESSURE;
					break;
				case THERMAL: 	
					SubItem = SSL_THERMAL;
					break;
				case LUMPWT: 	
					SubItem = SSL_LUMPWT; 
					break;
				case GRAVITY: 	
					SubItem = SSL_LUMPWT; 
					break;
				/////////////////////// Spectra
				case SPL_FORCE: 	
					SubItem = SSPL_FORCE;
					break;
				case SPL_DISPLACE: 	
					SubItem = SSPL_DISPLACE;
					break;
				case SPL_VELOCITY: 	
					SubItem = SSPL_VELOCITY;
					break;
				case SPL_ACCEL: 	
					SubItem = SSPL_ACCEL;
					break;
				case SPL_PRESSURE: 	
					SubItem = SSPL_PRESSURE; 
					break;
				case SPL_THERMAL: 	
					SubItem = SSPL_THERMAL; 
					break;
				case SPL_LUMPMASS: 	
					SubItem = SSPL_LUMPMASS; 
					break;
				/////////////////////// History
				case HIS_FORCE: 	
					SubItem = SHIS_FORCE;
					break;
				case HIS_DISPLACE: 	
					SubItem = SHIS_DISPLACE;
					break;
				case HIS_VELOCITY: 	
					SubItem = SHIS_VELOCITY;
					break;
				case HIS_ACCEL: 	
					SubItem = SHIS_ACCEL;
					break;
				case HIS_PRESSURE: 	
					SubItem = SHIS_PRESSURE; 
					break;
				case HIS_THERMAL: 	
					SubItem = SHIS_THERMAL; 
					break;
				case HIS_LUMPMASS: 	
					SubItem = SHIS_LUMPMASS; 
					break;
			}
		}
			
			
		default:

			pWnd->SetMouseBoxType(IGENBOX);
			//////////////////////////////////
			if((GetNodeBox()->GetStyle()) & WS_VISIBLE)
				GetNodeBox()->ShowWindow(SW_HIDE);
			if((GetCurveBox()->GetStyle()) & WS_VISIBLE)
				GetCurveBox()->ShowWindow(SW_HIDE);
			if((GetPatchBox()->GetStyle()) & WS_VISIBLE)
				GetPatchBox()->ShowWindow(SW_HIDE);
			if((GetSolidBox()->GetStyle()) & WS_VISIBLE)
				GetSolidBox()->ShowWindow(SW_HIDE);

			break;
		///////		
			
	}
	/////////////////////////////////////////////////////////////////// Notify
	pWnd->SetActiveObjectType(GetActiveElemObject());
	pWnd->SetActiveToolType(SubItem);
	m_WPARAM = IDW_IGENBOX;
	ReSetDataDialogs();
	/////////////////////////////////////////////////////
	return; 
		
}
///////////////////////////////// end of module ///////////////////////
