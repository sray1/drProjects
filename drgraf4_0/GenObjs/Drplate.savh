// Plate.h : header file
//
#ifndef _DRPLATE_H
#define _DRPLATE_H       


//#undef AFX_DATA
//#define AFX_DATA AFX_EXT_DATA


#include "DrObject.h" 
#include "DrNode.h" 
#include "crextern.h"           // card structures
//////////////////////////////
#define	MAX_NODES_PLAT		4
#define MAX_PLAT_DRAW_PT	4
#define MAX_PLAT_DRAW_PT2	4
/////////////////////////////////////////////////////////////////////////////
// CDrPlat    ///////////////////////////////////////////////////////////////
class AFX_EXT_CLASS CDrPlat: public CDrObject
{
public:
// Construction                 
	CDrPlat();
//////////////////////////////////////
	DECLARE_SERIAL(CDrPlat);
//////////////////////////////////////
	
	
// Operations
public:

	virtual	void 		ReadyToDelete();
	//////////////////////////////////////////////// Card/Data
	virtual void		Pack_drPipe(CString* pstrCard);
	virtual PLATCARD*	Parse_drPipe(CString* pstrCard)
						{return (PLATCARD*)NULL;};                    //  TOBE DONE
	virtual PLATCARD*	GetPlatCard(){return &m_PlatCard;};
	virtual int			GetCardNo(){return m_nCardNo;};
	virtual void		SetCardNo(int nCardNo){m_nCardNo = nCardNo;}; 
	////////////////////////////////////////////////
	// overrides of virtuals in CDrObject;
	virtual void		DoDataView(CDC* PtrDC, int y);
	virtual void 		DoDrawView(CDC* PtrDC,BOOL bPenChange);
	virtual void		InitDraw(CDC* PtrDC,BOOL bParallel,int nView,
					 		pMATRIX pViewM,pMATRIX pvv3DM,double dzMin,
							double dScale_U,double dScale_V);
	virtual void		SetObjectInfo(CDrObject* pObject);
	virtual void 		GetObjectInfo(CDrObject* pObject);
	virtual int 		DealObjectDialog();
	////////////////////////////////////////// for projection
	virtual int			GetMaxCorners(){return m_PlatCard.nCorners;};
	//////////////////////////////////////////////////////////////
	virtual	void 		TransformObjectToWorld(pMATRIX pLM,BOOL bYes);
	virtual	void 		TransformObjectToView(pMATRIX pViewM);
	virtual	BOOL 		RemoveHiddenObject(pMATRIX pViewM,WORLD VDir,int nType);
	virtual	void 		ProjectObject
							(pMATRIX pvv3DM,double dScale_U,double dScale_V);
	virtual	void 		FinishObject();
	virtual BOOL 		IsObjectHit(CDrObject* pObject,CClientDC* ptrDC,int nNet,
									POINT point,RECT* pRect);
	virtual BOOL 		IsKeyMatch(CDrObject* pObject, CString KeyID,UINT KeyNo);

	virtual void		Serialize(CArchive& ar);	
	////////////////////////////////////////////////
	virtual	BOOL 		CullScreen(pMATRIX pViewM);
	virtual	BOOL 		CullWorld(WORLD ViewDir);

	virtual	POINT*	 	GetCentroidScreen2D(){return &m_CentroidScreen2D;};
	virtual	void		SetCentroidScreen2D(POINT Centroid){m_CentroidScreen2D = Centroid;};
	virtual	pWORLD	 	GetCentroidScreen3D(){return &m_CentroidScreen3D;};
	virtual	void		SetCentroidScreen3D(WORLD Centroid){m_CentroidScreen3D = Centroid;};
	virtual	pWORLD	 	GetCentroidEye(){return &m_CentroidEye;};
	virtual	void		SetCentroidEye(WORLD Centroid){m_CentroidEye = Centroid;};
	virtual	pWORLD	 	GetCentroidWorld(){return &m_CentroidWorld;};
	virtual	void		SetCentroidWorld(WORLD Centroid){m_CentroidWorld = Centroid;};

	virtual	double	 	GetCentroidZdepth(){return m_Zdepth;};
	virtual	void		SetCentroidZdepth(double Zdepth){m_Zdepth = Zdepth;};

	virtual	pWORLD	 	GetNormalWorld(){return &m_NormalWorld;};
	virtual	void		SetNormalWorld(WORLD Normal){m_NormalWorld = Normal;};
	virtual	pWORLD	 	GetNormalEye(){return &m_NormalEye;};
	virtual	void		SetNormalEye(WORLD Normal){m_NormalEye = Normal;};
	virtual	pWORLD	 	GetNormalScreen3D(){return &m_NormalScreen3D;};
	virtual	void		SetNormalScreen3D(WORLD Centroid){m_NormalScreen3D = Centroid;};
	virtual	POINT*	 	GetNormalScreen2D(){return &m_NormalScreen2D;};
	virtual	void		SetNormalScreen2D(POINT Centroid){m_NormalScreen2D = Centroid;};
	virtual BOOL 		IsCulled(){return m_bCulled;};
	virtual void 		SetCulled(BOOL bCulled){m_bCulled = bCulled;};
	virtual CDListMgr*	GetNodeList(){return &m_NodeList;};
	virtual CDListMgr* 	GetPatchList(){return &m_PatchList;};
	virtual CDListMgr* 	GetSolidList(){return &m_SolidList;};
	//////////////////////////////////////////////
	virtual	int		 	GetPlateType(){return m_PlatCard.nPlateType;};
	virtual	void		SetPlateType(int nPlateType)
						{
							m_PlatCard.nPlateType = nPlateType;};
    //////////////////////////////////////////////////////
	virtual void 		Calc_CentroidWorld();
	virtual void 		Calc_CentroidEye();
	virtual void 		Calc_CentroidScreen3D(double dScale_U,double dScale_V);
	virtual void 		Calc_NormalWorld();
	virtual void 		TransformNormalToEye(pMATRIX pView);
	virtual void 		ProjectNormalToScreen3D
							(pMATRIX pvv3DM,double dScale_U,double dScale_V);

	 
protected:
	
			void 		TransformToWorldPos(pMATRIX pLM,BOOL bYes);
			void 		TransformToEyePos(pMATRIX pViewM);
			void 		ProjectToScreenPos
							(pMATRIX pvv3DM,double dScale_U,double dScale_V);
			void 		Calc_ScreenRectFromCNodes();
			void 		GoDoIt(CDC* PtrDC,BOOL bPenChange);
			
// Helper functions
protected:
// Attributes


	///////////////////////////////// Render 
    BOOL		m_bCulled;
    WORLD  		m_NormalWorld; 			// WorldPos
    WORLD  		m_NormalEye; 			// EyePos
    WORLD  		m_NormalScreen3D;		// Screen3D
    POINT  		m_NormalScreen2D;		// Screen2D
    WORLD		m_CentroidWorld;		// WorldPos
    WORLD		m_CentroidEye;			// EyePos
    WORLD  		m_CentroidScreen3D;		// Screen3D
    POINT  		m_CentroidScreen2D;		// Screen2D
    double		m_Zdepth;				// EyePos
	//////////////////////////////
	CDListMgr	m_NodeList;
	/////////////////////
    CDListMgr   m_PatchList;	// list of pointers to DrObjects
    							// attached to this Elem
    CDListMgr   m_SolidList;	// list of pointers to DrObjects
    							// attached to this Elem
	//////////////////////////////    							
	/////////////////////////////////
	PLATCARD	m_PlatCard;
	int			m_nCardNo;


public:
	virtual ~CDrPlat();
public:
};

#undef AFX_DATA
#define AFX_DATA
/////////////////////////////////////////////
#endif                                       



