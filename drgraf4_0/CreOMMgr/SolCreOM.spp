// Mouse.cpp : implementation file
//


#include "stdafx.h" 
#include <math.h>
#include <float.h>		// DBL_MIN

#include "3DMath.h"
#include "XForm.h"
/////////////////////
#include "drgraf.h"
#include "drgrafrm.h"
#include "UserMsg.h"
#include "drawView.h"
/////////////////////
#include "drgradoc.h"
#include "ObjMgr.h"
#include "DListMgr.h"
/////////////////////
#include "Def_IGen.h"                    
#include "Def_Elem.h"                    
///////////////////// dialogMgr
#include "MMs0Mgr.h"  
#include "MMs3Mgr.h"	// for stitching
////////////////////// 
#include "MI_Gang3.h" 
#include "MI_3SPN.h" 
#include "MI_3Prof.h" 
#include "Dlg_CrOI.h"
//////////////////////
#include "SolCreOM.h" 

#ifdef _DEBUG
#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
#endif
///////////////////////////////////////////////////////////////////////////////////////////
// if NODE_SPAWN: Object Grab Node Same As Node
//////////////////////////////////////////////
#define MAX_INFO_XLATE		3	// 1 Object/1 Object Grab Node/1 Node        
#define MAX_INFO_ROTATE		6	// 1 Object/1 Object Grab Node/2 Nodes( for Axis)           
#define MAX_INFO_SCALE		2	// 1 Object/1 Object Grab Node/None but 3 Coords(from Dlg)           
#define MAX_INFO_REFLECT	4	// 1 Object/1 Object Grab Node/	3 Nodes ( defining Plane or
								//			1 Node on Plane + 2 Nodes for Normal        
#define MAX_INFO_SHEAR		2	// 1 Object/1 Object Grab Node/None but 3 Coords(from Dlg) 
#define MAX_INFO_SPAWN		0	// 1 Object   
///////////////////////////////////////////////////////////////////////////////////////////      
#define	new					DEBUG_NEW
#define	BUFF_SIZE			1024
////////////////////////////////////
IMPLEMENT_SERIAL(CMs3CreOM,CMs2CreOM,1)
/////////////////////////////////////////////////////////////////////////////
CMs3CreOM::CMs3CreOM()
{
	m_bStitch		= FALSE;
	m_bDoModalDone = FALSE;
}

CMs3CreOM::~CMs3CreOM()
{
}

void CMs3CreOM::Init_SOL()
{
	Init_NOD();
	//////////////////
	CDrGrafDoc* pDoc 		= ((CDrGrafApp*)AfxGetApp())->GetDocument(); 
	CObjectMgr* pObjectMgr 	= pDoc->GetObjectMgr();
	CMsObjMgr* pMsObjMgr 	= pDoc->GetMsObjMgr();
	/////////////////////////////
	CMI_Gang0 Gang0;
	Gang0.SetElemInfoID(m_SpawnedID,MESH3D);		
	/////////////////////////////////////////// Node
	m_pSpawnedMesh3D		= NULL;
	m_pParentMesh3D		= NULL;
	m_ParentID			= "";
	m_pCurrentMesh3D		= NULL;
	/////////////////////////////////////////// Dlg_CrOI 
	m_NID			= m_ParentID;
	/////////////////////////////////////////// STitch
	m_p3Profile		= NULL;
	m_pLastMesh3D	= NULL;
	m_Mesh3DList.RemoveAll();

}

void CMs3CreOM::Terminate_SOL(BOOL bError)
{
	Terminate_NOD(bError);
	////
	if(bError)
	{
		/////////////////////////////////////////// 
		if(m_pSpawnedMesh3D)
		{
			delete m_pSpawnedMesh3D;
			m_pSpawnedMesh3D = NULL;
		}
		/////////////////////////////////////////// 
		if(m_p3Profile)
		{
			delete m_p3Profile;
			m_p3Profile		= NULL;
			m_pCurrentMesh3D	= NULL;
			m_pLastMesh3D	= NULL;
			m_Mesh3DList.RemoveAll();
		}
		///////////////////////////
	}
}

void CMs3CreOM:: ElementLeftDown_SOL()
{	
	ElementLeftDown_NOD();
}

void CMs3CreOM::OnEBoxLButtonDown_SOL(CClientDC* pdc,CView* pView,GENERATE gener,
											UINT nFlags, CPoint point)
{
	m_nFlags				= nFlags;
	m_pView					= pView;
	m_pdc					= pdc;
	////////////////////////////////
	m_Gener					= gener;
	/////////////////////////////////////////////////////////
	CDrGrafFrame* pWnd		= (CDrGrafFrame*)AfxGetMainWnd();
	/////////////////////////////////////////////////////////
	CDrGrafDoc* pDoc 		= ((CDrGrafApp*)AfxGetApp())->GetDocument(); 
	CObjectMgr* pObjectMgr 	= pDoc->GetObjectMgr();
	CBooleans* pBool		= (CBooleans*)pObjectMgr->GetSpecObject(BOOLEANS);
	CDListMgr* pDListMgr;
	/////////////////////////////////// 
   	m_bDragOn 		= pBool->IsDragOn();
	m_bDialogOn		= pBool->IsDialogOn();
	m_bAutoAcceptOn	= pBool->IsAutoAcceptOn();
	if(m_bDone)			// Reset
		m_nInfoDone		= 0;
	//////////////////////////////////////////////////
	m_nActiveObject = pWnd->GetActiveObjectType(); 
	m_nActiveTool	= pWnd->GetActiveToolType();    // -1= INSERT
	/////////////////////////////////////////////////////////////////////////
	pObjectMgr->SetActiveObjectType(m_nActiveObject);       // Set ObjectType 
	////////////////////////////////////////////////// No Solid
	pDListMgr 	= pObjectMgr->GetObjectList(MESH3D);
	if(pDListMgr->GetCount()<=0)
		return;
	//////////////////////////
    if(m_Gener == FORWARD)
		ElementLeftDown_SOL();
	else	
    if(m_Gener == REVERSE)
		;
//		ElementLeftDown_I();
	//////////////////////////////////
}

int CMs3CreOM::LeftUp_GetMesh3D_Parent(POINT point)
{
	int nResult;
	///////////////////////////////////////////// See if any Existing Node Hit
	nResult = LeftUp_Mesh3D_Accept(point);	// TRUE = Parent
	///////////////////
	if(nResult < 0)
		return nResult; // Cancel or No Hit
	///////
	if(nResult>=0)	// Hit
	{
		switch(m_nInfoDone)
		{
			case 0:	// 
				m_pParentMesh3D	= m_pCurrentMesh3D;
				m_ParentID		= m_pParentMesh3D->GetObjectID();
				break;
			default:
				return -1;
		}
	}
	//////////////////////////////////////
	return 0;
}

int CMs3CreOM::LeftUp_TRANSLATE_SOL(POINT point)
{
//	if(m_bDirect && m_bDominant)
//		return -1;	// Should Not be Here
	///////////////////
	int nResult;
	switch(m_nInfoDone)
	{
		case 0://	Parent Solid	
			nResult = LeftUp_GetMesh3D_Parent(point);
			if(nResult<0)
				return nResult;
			return 0;
		case 1://	Grab Node	
		case 2://	To Node
			m_bCorMNodeOpDone = FALSE;
			///
			nResult = LeftUp_GetNode_XLATE(point,TRUE);		// try CNODE
			if(nResult == 0 || nResult == -2)
				return nResult;
			///
			nResult = LeftUp_GetNode_XLATE(point,FALSE);	// try MNODE
			if(nResult == 0 || nResult == -2)
				return nResult;
			//
			m_bCorMNodeOpDone = TRUE;
			///
			nResult = LeftUp_GetNode_XLATE(point,FALSE);	// try INODE
			if(nResult < 0)
				return nResult;
			//
			return 0;
			////////
		default:
			break;
	}
	return -1;
}

int CMs3CreOM::LeftUp_ROTATE_SOL(POINT point)
{
//	if(m_bDirect && m_bDominant)
//		return -1;	// Should Not be Here
	///////////////////
	int nResult;
	switch(m_nInfoDone)
	{
		case 0://	Parent Solid	
			nResult = LeftUp_GetMesh3D_Parent(point);
			if(nResult<0)
				return nResult;
			return 0;
		case 1://	Grab Node	
			m_bCorMNodeOpDone = FALSE;
			///
			nResult = LeftUp_GetNode_ROTATE(point,TRUE);		// try CNODE
			if(nResult == 0 || nResult == -2)
				return nResult;
			///
			nResult = LeftUp_GetNode_ROTATE(point,FALSE);	// try MNODE
			if(nResult == 0 || nResult == -2)
				return nResult;
			//
			m_bCorMNodeOpDone = TRUE;
			///
			nResult = LeftUp_GetNode_ROTATE(point,FALSE);		// try INODE
			if(nResult < 0)
				return nResult;
			//
			return 0;
			////////
		case 2://		// From Rot Direction if Not AngleIn: Reference
			if(m_bAngleIn)
				return -1;
			//////////////
			m_bCorMNodeOpDone = FALSE;
			///
			nResult = LeftUp_GetNode_ROTATE(point,TRUE);		// try CNODE
			if(nResult == 0 || nResult == -2)
				return nResult;
			///
			nResult = LeftUp_GetNode_ROTATE(point,FALSE);	// try MNODE
			if(nResult == 0 || nResult == -2)
				return nResult;
			//
			m_bCorMNodeOpDone = TRUE;
			///
			nResult = LeftUp_GetNode_ROTATE(point,FALSE);		// try INODE
			if(nResult < 0)
				return nResult;
			//
			return 0;
			////////
		case 3://		// To Rot Direction
			if(m_bAngleIn)
				return -1;
			//////////////
			m_bCorMNodeOpDone = FALSE;
			///
			nResult = LeftUp_GetNode_ROTATE(point,TRUE);		// try CNODE
			if(nResult == 0 || nResult == -2)
				return nResult;
			///
			nResult = LeftUp_GetNode_ROTATE(point,FALSE);	// try MNODE
			if(nResult == 0 || nResult == -2)
				return nResult;
			//
			m_bCorMNodeOpDone = TRUE;
			///
			nResult = LeftUp_GetNode_ROTATE(point,FALSE);		// try INODE
			if(nResult < 0)
				return nResult;
			//
			return 0;
			////////
		case 4://		// From Rot Direction if Not AngleIn
			if(m_bAngleIn)
				return -1;
			//////////////
			m_bCorMNodeOpDone = FALSE;
			///
			nResult = LeftUp_GetNode_ROTATE(point,TRUE);		// try CNODE
			if(nResult == 0 || nResult == -2)
				return nResult;
			///
			nResult = LeftUp_GetNode_ROTATE(point,FALSE);	// try MNODE
			if(nResult == 0 || nResult == -2)
				return nResult;
			//
			m_bCorMNodeOpDone = TRUE;
			///
			nResult = LeftUp_GetNode_ROTATE(point,FALSE);	// try INODE
			if(nResult < 0)
				return nResult;
			//
			return 0;
			////////
		case 5://		// To Rot Direction
			if(m_bAngleIn)
				return -1;
			//////////////
			m_bCorMNodeOpDone = FALSE;
			///
			nResult = LeftUp_GetNode_ROTATE(point,TRUE);		// try CNODE
			if(nResult == 0 || nResult == -2)
				return nResult;
			///
			nResult = LeftUp_GetNode_ROTATE(point,FALSE);	// try MNODE
			if(nResult == 0 || nResult == -2)
				return nResult;
			//
			m_bCorMNodeOpDone = TRUE;
			///
			nResult = LeftUp_GetNode_ROTATE(point,FALSE);		// try INODE
			if(nResult < 0)
				return nResult;
			//
			return 0;
			////////
		default:
			break;
	}
	return -1;
}

int CMs3CreOM::LeftUp_SCALE_SOL(POINT point)
{
//	if(m_bDirect && m_bDominant)
//		return -1;	// Should Not be Here
	///////////////////
	int nResult;
	switch(m_nInfoDone)
	{
		case 0://	Parent Solid	
			nResult = LeftUp_GetMesh3D_Parent(point);
			if(nResult<0)
				return nResult;
			return 0;
		case 1://	Grab Node	
			m_bCorMNodeOpDone = FALSE;
			///
			nResult = LeftUp_GetNode_SCALE(point,TRUE);		// try CNODE
			if(nResult == 0 || nResult == -2)
				return nResult;
			///
			nResult = LeftUp_GetNode_SCALE(point,FALSE);	// try MNODE
			if(nResult == 0 || nResult == -2)
				return nResult;
			//
			m_bCorMNodeOpDone = TRUE;
			///
			nResult = LeftUp_GetNode_SCALE(point,FALSE);	// try INODE
			if(nResult < 0)
				return nResult;
			//
			return 0;
		case 2:		// Force Dialog entry
			return -2;
		default:
			break;
	}
	return -1;
}

int CMs3CreOM::LeftUp_REFLECT_SOL(POINT point)
{
//	if(m_bDirect && m_bDominant)
//		return -1;	// Should Not be Here
	///////////////////
	int nResult;
	switch(m_nInfoDone)
	{
		case 0://	Parent Solid	
			nResult = LeftUp_GetMesh3D_Parent(point);
			if(nResult<0)
				return nResult;
			return 0;
		case 1://	Ist Pt. or Node On Plane	
		case 2://	2nd Pt. or Node On Plane OR Ist Pt. on Normal	
		case 3://	Pt. or Node On Plane OR 2nd Pt. on Normal	
			m_bCorMNodeOpDone = FALSE;
			///
			nResult = LeftUp_GetNode_REFLECT(point,TRUE);		// try CNODE
			if(nResult == 0 || nResult == -2)
				return nResult;
			///
			nResult = LeftUp_GetNode_REFLECT(point,FALSE);		// try MNODE
			if(nResult == 0 || nResult == -2)
				return nResult;
			//
			m_bCorMNodeOpDone = TRUE;
			///
			nResult = LeftUp_GetNode_REFLECT(point,FALSE);		// try INODE
			if(nResult < 0)
				return nResult;
			//
			return 0;
			////////
		default:
			break;
	}
	return -1;
}

int CMs3CreOM::LeftUp_SHEAR_SOL(POINT point)
{
//	if(m_bDirect && m_bDominant)
//		return -1;	// Should Not be Here
	///////////////////
	int nResult;
	switch(m_nInfoDone)
	{
		case 0://	Parent Solid	
			nResult = LeftUp_GetMesh3D_Parent(point);
			if(nResult<0)
				return nResult;
			return 0;
		case 1://	Grab Node	
			m_bCorMNodeOpDone = FALSE;
			///
			nResult = LeftUp_GetNode_SHEAR(point,TRUE);		// try CNODE
			if(nResult == 0 || nResult == -2)
				return nResult;
			///
			nResult = LeftUp_GetNode_SHEAR(point,FALSE);	// try MNODE
			if(nResult == 0 || nResult == -2)
				return nResult;
			//
			m_bCorMNodeOpDone = TRUE;
			///
			nResult = LeftUp_GetNode_SHEAR(point,FALSE);	// try INODE
			if(nResult < 0)
				return nResult;
			//
			return 0;
			////////
		case 2:		// Force Dialog entry
			return -2;
		default:
			break;
	}
	return -1;
}

void CMs3CreOM::ElementLeftUp_SOL(CPoint point)
{                          

	CDrGrafDoc* pDoc 		= ((CDrGrafApp*)AfxGetApp())->GetDocument(); 
	CObjectMgr* pObjectMgr 	= pDoc->GetObjectMgr();
	CDrGrafFrame* pWnd		= (CDrGrafFrame*)(AfxGetApp()->m_pMainWnd);
	CString strCurr;
	//////////////////////////////////////////////////////////////////
//	char buf[20];
	CString Nid;
	BOOL bRightOn = FALSE;
	m_bStitch		= FALSE;
	///////////////////
	switch(m_nActiveTool) 
	{
		///////////////////////////////////////////////////// Solides Insert
		case COP_TRANSLATE:

			if(m_nInfoDone > MAX_INFO_XLATE)
				return;
			////////////////
			UpdateDlg_TRUE_XLATE();
			//////////////////
			if(!(m_bDirect && m_bDominant) )
			{
				if(LeftUp_TRANSLATE_SOL(point)<0)
				{
					Terminate_SOL(TRUE);
					return;
				}
			}
			/////////////
			m_nInfoDone++;
			UpdateDlg_FALSE_XLATE();
			///////
			return;

		case COP_ROTATE: 

			if(m_bAngleIn)
			{
				if(m_nInfoDone > 2)
					return;
			}
			else
			{
				if(m_nInfoDone > MAX_INFO_ROTATE)
					return;
			}
			////////////////
			UpdateDlg_TRUE_ROTATE();
			//////////////////
			if(!(m_bDirect && m_bDominant) )
			{
				if(LeftUp_ROTATE_SOL(point)<0)
				{
					Terminate_SOL(TRUE);
					return;
				}
			}
			/////////////
			m_nInfoDone++;
			UpdateDlg_FALSE_ROTATE();
			///////
			return;

		case COP_SCALE: 

			if(m_nInfoDone > MAX_INFO_SCALE)
				return;
			////////////////
			UpdateDlg_TRUE_SCALE();
			//////////////////
			if(!(m_bDirect && m_bDominant) )
			{
				if(LeftUp_SCALE_SOL(point)<0)
				{
					Terminate_SOL(TRUE);
					return;
				}
			}
			/////////////
			m_nInfoDone++;
			UpdateDlg_FALSE_SCALE();
			///////
			return;

		case COP_REFLECT: 

			if(m_nInfoDone > MAX_INFO_REFLECT)
				return;
			////////////////
			UpdateDlg_TRUE_REFLECT();
			//////////////////
			if(!(m_bDirect && m_bDominant) )
			{
				if(LeftUp_REFLECT_SOL(point)<0)
				{
					Terminate_SOL(TRUE);
					return;
				}
			}
			/////////////
			m_nInfoDone++;
			UpdateDlg_FALSE_REFLECT();
			///////
			return;

		case COP_SHEAR:

			if(m_nInfoDone > MAX_INFO_SHEAR)
				return;
			////////////////
			UpdateDlg_TRUE_SHEAR();
			//////////////////
			if(!(m_bDirect && m_bDominant) )
			{
				if(LeftUp_SHEAR_SOL(point)<0)
				{
					Terminate_SOL(TRUE);
					return;
				}
			}
			/////////////
			m_nInfoDone++;
				UpdateDlg_FALSE_SHEAR();
				///////
				return;
		////////////////////////////////////////////////// SPAWN	
		case COP_SPAWN:				// 

			if(m_nInfoDone > MAX_INFO_SPAWN)
				return;
			////////////////
			if(LeftUp_SSPAWN(point)<0)
			////////////////
			{
				Terminate_SOL(TRUE);
				return;
			}
			/////////////
			m_nInfoDone++;
			///////
			return;
		////////////////////////////////////////////////// STITCH	
		case COP_STITCH:				// 

			m_bStitch		= TRUE;
			///////		
			if(LeftUp_SSTITCH(point)<0)
			////////////////
			{
				Terminate_SOL(TRUE);
				return;
			}
			///////////////////	
			m_nInfoDone++;
			return;
		//////////////////////////////////////////////////
		default:  
			return;
	} 
	//////////////////////////////
	CString* str = new CString;
	char* buf = str->GetBuffer(BUFF_SIZE);
	int j;
	j = sprintf(buf,"***** Please Note ****\n");
	j += sprintf(buf+j,"If you are trying to Hit an Object or\n");
	j += sprintf(buf+j,"Click in for Coordinates, UnCheck\n");
	j += sprintf(buf+j,"the Dominant Button in the Dialog Box\n");
	//////
	AfxMessageBox(*str);
	delete str;
	///////////
	m_nInfoDone--;
}	

int CMs3CreOM::LeftUp_Mesh3D_Accept(CPoint point)
{
	///////////////////////////////////////////////////////////////////////
	CDrGrafDoc* pDoc 		= ((CDrGrafApp*)AfxGetApp())->GetDocument();
	CObjectMgr* pObjectMgr  = pDoc->GetObjectMgr();
	CMsObjMgr* pMsObjMgr 	= pDoc->GetMsObjMgr();
	CDListMgr* pDListMgr	= pObjectMgr->GetObjectList(MESH3D);
	CDListMgr* pList;
	//////////////////////////////////////////////////////////////////
	CString		ID;
	CString*	pID = &ID;
	CDrMesh3D*	pDrMesh3D;
	int			nActiveIndex,index;
	////////////////////////////////////
	CHitNet*	pHitNet		= (CHitNet*)pObjectMgr->GetSpecObject(HITNET);
	double		dTol		= pHitNet->GetSearchDet(); 
	WORtoWOP(&dTol,&dTol);	// physical
	///////////////////////////////////////////// See if any Existing Solid Hit
	index = IsObjectHit(MESH3D,point,0);
	////////////////////////////////////////////////////
	if(index<0)
		return -1; // No Solid Hit
	//////////////////////////////////////////////////////////////// Existing Solid
	pDrMesh3D	= (CDrMesh3D*)pDListMgr->GetObject(index);
	ID			= pDrMesh3D->GetObjectID();
	//////////////////////////////////////////////////////////////// for Stitching,Check Contiguity
	if(m_bStitch && !m_Mesh3DList.IsEmpty())
	{
		if(IsInvalidSplicing(pDrMESH3D))
		return -1; // No MESH3D Hit
	}
	/////////////////////////////////////////
	pList = pObjectMgr->GetObjectList(MESH3D);
	nActiveIndex = pList->GetObjectIndex(MESH3D, ID);;
	pObjectMgr->SetActiveObjectIndex(nActiveIndex);	// set Active Index									
	pObjectMgr->SetActiveObjectType(MESH3D);		    // set Active Type									
	pObjectMgr->UpdateAllViewsWithActiveIndex(NULL,nActiveIndex,MESH3D);
	//////////////////////////////////////////////////////////////// MultipleSearch
	int startIndex = index+1;
	int nResult;
	/////////////////////////
	if(!m_bAutoAcceptOn)
	{
		/////////////
		for(;;)
		{
			//////////////////////////////
//			nResult = ShowParentMesh3DInfo(pDrMesh3D);
			nResult = ShowParentMesh3DInfo(pDrMesh3D);
			/////////////
			if(nResult == IDYES)
				//////////////////////////////////////////////////////// Accept Old
				break;
			else
			if(nResult == IDNO)
			{
				//////////////////////////////////////////////////////// Retry
				index = IsObjectHit(MESH3D,point,startIndex);
				if(index>=0)
				{
					pDrMesh3D	= (CDrMesh3D*)pDListMgr->GetObject(index);
					ID		= pDrMesh3D->GetObjectID();
					///////////////////////////////////////// 
					if(m_bStitch)
					{
						if(IsInvalidSplicing(pDrMESH3D))
						return -1; // No MESH2D Hit
					}
					///////////////////////////////////////// 
					pList = pObjectMgr->GetObjectList(MESH3D);
					nActiveIndex = pList->GetObjectIndex(MESH3D, ID);;
					pObjectMgr->SetActiveObjectIndex(nActiveIndex);		    // set Active Index									
					pObjectMgr->SetActiveObjectType(MESH3D);		    // set Active Index									
					pObjectMgr->UpdateAllViewsWithActiveIndex(NULL,nActiveIndex,MESH3D);
					////////////////////////////////////////
					startIndex  = index+1;
					/////////////////////
				}
				else
					////////////////
					return -2;
				/////////
			}
			else				// Cancel
				//////////////////////////////////////////////////////// Do Nothing
				return -2;
		}						// end for loop
		///////////////////////////////////////
	}				// end !AutoAccept loop
	//////////////////////////////////////////////////////////////////// finally, accept
	m_pCurrentMesh3D = pDrMesh3D;
	/////////
	return 0;
	/////////
}

BOOL CMs3CreOM::IsInvalidSplicing(CDrMesh3D* pDrMESH3D)
{
	CDListMgr* pINList;
	//////////////////////////////////////////////////////// Last MESH2D
	pINList = m_pLastMesh3D->GetFE0DList(); 
	CDrNode* pNode_End = (CDrNode*)pINList->GetTail();
	//////////////////////////////////////////////////////// Current MESH2D
	pINList = pDrMESH3D->GetFE0DList(); 
	CDrFE0D* pNode_Beg = (CDrFE0D*)pINList->GetHead();
	////////////////////////////////////////////////////////
/*
		WORLD LocalPosB,LocalPosE;
		LocalPosB = *(pNode_Beg->GetLocalPos());
		LocalPosE = *(pNode_End->GetLocalPos());
*/
	/////////
	if(pNode_Beg->GetObjectID() != pNode_End->GetObjectID())
	{
		//////////////////////////////
		CString* str = new CString;
		char* buf = str->GetBuffer(BUFF_SIZE);
		int j;
		//////
		j = sprintf(buf,"***** INVALID SELECTION ****\n\n");
		//////////////////////////////////////
		j += sprintf(buf+j,"MESH3D is Not Contiguous to Previous MESH2D\n");
		j += sprintf(buf+j,"i.e., End Node of Previous MESH2D and Beginning\n");
		j += sprintf(buf+j,"Node of Current MESH2D do not have the same ID\n");
		j += sprintf(buf+j,"Select MESH2Ds that are Contiguous or Make sure\n");
		j += sprintf(buf+j,"that the Nodes of Contiguous MESH2Ds are Merged\n\n");
		//////////////////////////
		AfxMessageBox(*str,MB_OK|MB_ICONINFORMATION);
		return TRUE; // Invalid 
	}
	//////
	return FALSE;	// Valid 
}

int CMs3CreOM::LeftUp_SSPAWN(CPoint point)
{
	CDrGrafFrame* pWnd		= (CDrGrafFrame*)(AfxGetApp()->m_pMainWnd);
	CString strCurr;
	///////////////////
	int nResult;
	////////////
	nResult = LeftUp_GetMesh3D_Parent(point);
	if(nResult<0)
		return nResult;
	////////////////////////////////////////
	nResult = ShowMesh3DToSpawn(m_pParentMesh3D,TRUE); // TRUE = With Dlg
	///////////
	if( nResult == -1)		// 
	{
		AfxMessageBox("ERROR:\nCMs3CreOM::LeftUp_SSpawn\nShowMesh3DToSpawn Problem");
		return -1;
	}
	////////////////////////////
	strCurr = "Ready for Spawning a MESH3D@";
	strCurr += "Click on a MESH3D to Spawn";
	/////////////////////////////////////////////// CurrStat: Show
	pWnd->GetCurrStat()->SetText(strCurr);
	pWnd->GetCurrStat()->Invalidate();
	pWnd->GetCurrStat()->UpdateWindow();
	///////////
	if(nResult == -2)		// Cancel
		return -2;
	///
	return 0;
}

int CMs3CreOM::ShowParentMesh3DInfo(CDrMesh3D* pDrMesh3D)
{
	int nResult = -1;
	return nResult;
}

int CMs3CreOM::ShowMesh3DToSpawn(CDrMesh3D* pParentMesh3D,BOOL bUsingDlg)
{

	CDrGrafFrame*	pWnd	= (CDrGrafFrame*)AfxGetMainWnd();
	CString			strCurr;
	////////////
	CDrGrafDoc* pDoc 		= ((CDrGrafApp*)AfxGetApp())->GetDocument(); 
	CObjectMgr* pObjectMgr  = pDoc->GetObjectMgr();
	CDListMgr* pDListMgr;
	////////////////////////////////
	strCurr = "Please Wait";
	///////////////////////// CurrStat: Show
	pWnd->GetCurrStat()->SetText(strCurr);
	pWnd->GetCurrStat()->Invalidate();
	pWnd->GetCurrStat()->UpdateWindow();
	///////////////////
	pObjectMgr->SetActiveObjectType(MESH3D);
	////////////////////////////////////////////////////////////////////////////// Add to DataBase
	int nActiveIndex;
	///////////////
	m_pSpawnedMesh3D	= (CDrMesh3D*)(pObjectMgr->AddToDataBase(nActiveIndex,MESH3D));
	m_pSpawnedMesh3D->SetShow(FALSE);	// not quite ready
	/////////////////////////////////////////////////////////////// Using CMI_CSPN
	CMI_3SPN MI_SSPN;
	int nResult;
	if(bUsingDlg)
	{
		m_pSpawnedMesh3D->SetObjectID(m_ObjID);
		///
		nResult = MI_SSPN.SpawnSolidShowingDlg(m_pSpawnedMesh3D,pParentMesh3D,pParentMesh3D,MESH3D);
	}
	else
	{
		pMATRIX	pXFMat	= m_pMatObj->GetMatrix();
		CString	SpawnID	= m_ObjID;
		////
		nResult = MI_SSPN.SpawnMesh3DWithoutDlg(m_pSpawnedMesh3D,pParentMesh3D,pXFMat,&m_SpawnedID,
												pParentMesh3D,MESH3D); 
	}
	if(nResult<0)
	{
		/////////////////////////////////////// Reset
		m_nInfoDone		= 0;
		m_bDone			= TRUE;	// 
		////////////////////////// Delete
		pObjectMgr->DeleteFromDataBase(nActiveIndex, MESH3D);
		m_pSpawnedMesh3D	= NULL;
		//////////////////////////
		return nResult;//
	}
	/////////////////////////////////////////////////////////// Control RectBound
	m_pSpawnedMesh3D->SetDirty(TRUE);
	m_pSpawnedMesh3D->SetShow(TRUE);
	////////////////////////////////////////////////////////// Save
	CString ID		= m_pSpawnedMesh3D->GetObjectID();
	pDListMgr	 	= pObjectMgr->GetObjectList(MESH3D);
	int nIndex		= pDListMgr->GetObjectIndex(MESH3D,ID); 
	int nOldIndex 	= pObjectMgr->GetActiveObjectIndex();
	pObjectMgr->SetActiveObjectIndex(nIndex); 
	pObjectMgr->SetActiveObjectType(MESH3D); 
    ////////////////////////////////////////////////////////// done/Invalidate
	pObjectMgr->UpdateAllViewsWithActiveIndex(NULL,nIndex,MESH3D);
	///////////////////////////////
	return 0;
}	 

int CMs3CreOM::LeftUp_SSTITCH(CPoint point)
{
	CDrGrafFrame* pWnd		= (CDrGrafFrame*)(AfxGetApp()->m_pMainWnd);
	CString strCurr;
	////////////////
	int nResult;
	///////////////////////////////////////////// See if any Existing MESH2D Hit
	nResult = LeftUp_Mesh3D_Accept(point);	// TRUE = Parent
	///
	if(nResult<0)
		return nResult;
	//////////////////////////////////////////////// Save it in the List
	m_Mesh3DList.InsertObject(m_pCurrentMesh3D);
	m_pLastMesh3D = m_pCurrentMesh3D; 
	////////////////////////////////////////////////
	strCurr = "Merging MESH3Ds. CLICK On Another";
	strCurr += "@MESH3D or CLICK In Right Mouse Button";
	/////////////////////////////////////////////// CurrStat: Show
	pWnd->GetCurrStat()->SetText(strCurr);
	pWnd->GetCurrStat()->Invalidate();
	pWnd->GetCurrStat()->UpdateWindow();
	///////////
	return 0;
}

int CMs3CreOM::Update_Status_3STITCH()
{
	CDrGrafFrame* pWnd		= (CDrGrafFrame*)(AfxGetApp()->m_pMainWnd);
	CString strCurr;
	////////////////////////////
	strCurr = "Ready for Another Stitching";
	strCurr += "@CLICK On a MESH3D to Stitch In";
	/////////////////////////////////////////////// CurrStat: Show
	pWnd->GetCurrStat()->SetText(strCurr);
	pWnd->GetCurrStat()->Invalidate();
	pWnd->GetCurrStat()->UpdateWindow();
	///////////
	return 0;
}

int CMs3CreOM::Show3ProfileToStitch()
{

	CDrGrafFrame*	pWnd	= (CDrGrafFrame*)AfxGetMainWnd();
	CString			strCurr;
	////////////
	CDrGrafDoc* pDoc 		= ((CDrGrafApp*)AfxGetApp())->GetDocument(); 
	CObjectMgr* pObjectMgr  = pDoc->GetObjectMgr();
	CMsObjMgr* pMsObjMgr	= pDoc->GetMsObjMgr();
	////////////////////////////////
	strCurr = "Please Wait";
	///////////////////////// CurrStat: Show
	pWnd->GetCurrStat()->SetText(strCurr);
	pWnd->GetCurrStat()->Invalidate();
	pWnd->GetCurrStat()->UpdateWindow();
	///////////////////
	pObjectMgr->SetActiveObjectType(MESH3D);
	//////////////////////////////////////////////////////////////////////////////
	//			.Add to DataBase
	/////////////////////////////////////
	int nActiveIndex;
	///////////////
	m_p3Profile	= (CDrProf_3*)(pMsObjMgr->AddToDataBase(nActiveIndex,M3_PROFILE));
	m_p3Profile->SetShow(FALSE);	// not quite ready
	/////////////////////////////////////////////////////////////// ID
	CDrProf_3* m_p2Profile = new CDrProf_3;
	m_p3Profile->SetObjectID(m_SpawnedID);	
	/////////////////////////////////////////////////////////////// Insert MESH2DList
	(m_p3Profile->GetMesh3DList())->AddTail(&m_Mesh3DList);
	m_Mesh3DList.RemoveAll();
	/////////////////////////////////////////////////////////////// LMList
	MATRIX		Mat;
	pMATRIX		pM = &Mat;
	///
	C3DMath	Math3D;
	Math3D.GetIdentityMATRIX(pM);
	///////////////////////////////////////////////////// Save: Defaults	
	CMatObj* pMatObj = new CMatObj;
	///////
	pMatObj->SetInstanced_Prof(FALSE);
	pMatObj->SetMatrix(pM);
	pMatObj->SetCurveLatch(CL_FORWARD);	// ALWAYS for Now
	///////////////////////////////////////////////////// save in the list
	int nCount = (m_p3Profile->GetMesh3DList())->GetCount();
	for (int c=0;c<nCount;c++)
		m_LMList.InsertObject(pMatObj);	// same One
	///////////////////////////////////////////////////// Insert LMList
	(m_p3Profile->GetLMList())->AddTail(&m_LMList);
	m_LMList.RemoveAll();
	/////////////////////////////////////////////////////////////// Using CMI_2Prof
	CMI_3Prof MI_3Prof;
	int nResult;
	////
	nResult = MI_3Prof.RBUp_3Profile(m_p3Profile); // NOT Using Dlg (Used for Now)
	///
	if(nResult<0)
	{
		/////////////////////////////////////// Reset
		m_nInfoDone		= 0;
		m_bDone			= TRUE;	//
		m_Mesh3DList.RemoveAll();
		////////////////////////// Delete
		pObjectMgr->DeleteFromDataBase(nActiveIndex, M3_PROFILE);
		m_p3Profile	= NULL;
		//////////////////////////
		return nResult;//
	}
	///////////////////////////////
	m_p3Profile->SetShow(FALSE);
	/////////////////////////////// 
	CDListMgr* pDListMgr	= pObjectMgr->GetObjectList(MESH3D);
	///////////////////////////////////////////////////////////////
	CDrMesh3D* pMESH3D = m_p3Profile->GetMesh3D();
	pMESH3D->SetShow(TRUE);
	pMESH3D->SetDirty(TRUE);
	//////////////////////////////////////////
	CString MESH3DID	= pMESH3D->GetObjectID();
	int nMESH3DIndex = pDListMgr->GetObjectIndex(MESH3D,MESH3DID); 
	int nOldIndex 	= pObjectMgr->GetActiveObjectIndex();
	pObjectMgr->SetActiveObjectIndex(nMESH3DIndex); 
	pObjectMgr->SetActiveObjectType(MESH3D); 
    ////////////////////////////////////////////////////////// done/Invalidate
	pObjectMgr->UpdateAllViewsWithActiveIndex(NULL,nMESH2DIndex,MESH2D);
	/////////
	return 0;
}	 


void CMs3CreOM::OnEBoxMouseMove_SOL(CClientDC* pdc,CView* pView,GENERATE gener,
											UINT nFlags, CPoint point)
{  

	m_nFlags				= nFlags;
	m_pView					= pView;
	m_pdc					= pdc;
	////////////////////////////////
	m_Gener					= gener;
	/////////////////////////////////////////////////////////
	CDrGrafFrame* pWnd		= (CDrGrafFrame*)AfxGetMainWnd();
	/////////////////////////////////////////////////////////
	CDrGrafDoc* pDoc 		= ((CDrGrafApp*)AfxGetApp())->GetDocument(); 
	CMouseMgr* pMouseMgr	= pWnd->GetMouseMgr(); 
	////////////////////////// LOG: Log/DEScaled
   	m_pdc->DPtoLP(&point);     
	LPOINT LpLOG;
	LpLOG.x = (long)point.x;
	LpLOG.y = (long)point.y;
   	m_pdc->LPtoDP(&point);
    /////////////////////////////////////////////
    if(!m_bDragging)  // not currently dragging 
    { 
    
		//////////////////////////////////////
		LPOINT3 MouseOldTempWIC = GetMouseOldWIC();
	    LPOINT3 MouseTempWIC 	= GetMouseWIC();
   		SetMouseOldWIC(MouseTempWIC);
   		LPOINT3 MouseWIC;
    	///////////////////////  LOG :DEScaled
    	LOGtoWIC2(&MouseWIC,&LpLOG,&MouseTempWIC); //LOG/Scaled WIC
    	////////////////////                 
    	SetMouseWIC(MouseWIC);
    	///////////////////////////
//    	pDoc->UpdateStatusBar(&dc);  WILL BE CALLED FROM VIEW, JUST SET HERE
		pMouseMgr->SetStatusMouseWIC(MouseWIC);
		////////////////////////////
		///////////////////// recover MouseWIC changed for statusbar update 
	    SetMouseOldWIC(MouseOldTempWIC);
	    SetMouseWIC(MouseTempWIC);

		return;
    }	
}

void CMs3CreOM::OnEBoxLButtonUp_SOL(CClientDC* pdc,CView* pView,GENERATE gener,
											UINT nFlags, CPoint point)
{
	m_nFlags				= nFlags;
	m_pView					= pView;
	m_pdc					= pdc;
	////////////////////////////////
	m_Gener					= gener;
	////////////////////////////////
    POINT Logpoint;
    m_pdc->DPtoLP(&point);
    Logpoint.x = point.x;
    Logpoint.y = point.y;
    m_pdc->LPtoDP(&point);							
    ////////////////////
    if(m_Gener == FORWARD)
		ElementLeftUp_SOL(Logpoint);
	else	
    if(m_Gener == REVERSE)
		;
//		ElementLeftUp_I();
	/////////////////////////
	
}

void CMs3CreOM::OnEBoxRButtonDown_SOL(CClientDC* pdc,CView* pView,GENERATE gener,
									UINT nFlags, CPoint point)
{ 
	m_nFlags				= nFlags;
	m_pView					= pView;
	m_pdc					= pdc;
	////////////////////////////////
	m_Gener					= gener;
	/////////////////////////////////////////////////////////
	CDrGrafFrame* pWnd		= (CDrGrafFrame*)AfxGetMainWnd();
	/////////////////////////////////////////////////////////
	CDrGrafDoc* pDoc 		= ((CDrGrafApp*)AfxGetApp())->GetDocument(); 
	CObjectMgr* pObjectMgr  = pDoc->GetObjectMgr();

	CBooleans* pBool		= (CBooleans*)pObjectMgr->GetSpecObject(BOOLEANS);
    /////////////////////////////  ELement Dialog On/Off Check
	m_bDialogOn     = pBool->IsDialogOn();
	m_bAutoAcceptOn	= pBool->IsAutoAcceptOn();
	/////////////////////////////////////////////////////////////////////////////
	m_nActiveObject = pWnd->GetActiveObjectType(); 
	m_nActiveTool	= pWnd->GetActiveToolType();    // -1= INSERT
	/////////////////////////////////////////////////////////////////////////
	pObjectMgr->SetActiveObjectType(m_nActiveObject);       // Set ObjectType 
	//////////////////////////////////////////
	switch(m_nActiveTool) 
	{
		case MESH3D:
			break;
		////////////////////////////////////////////////// Solid
		default:
			break;
	}  
}

void CMs3CreOM::OnEBoxRButtonUp_SOL(CClientDC* pdc,CView* pView,GENERATE gener,
								UINT nFlags, CPoint point)
{
	m_nFlags				= nFlags;
	m_pView					= pView;
	m_pdc					= pdc;
	////////////////////////////////
	m_Gener					= gener;
	/////////////////////////////////////////////////////////
	CDrGrafFrame* pWnd		= (CDrGrafFrame*)AfxGetMainWnd();
	/////////////////////////////////////////////////////////
	CDrGrafDoc* pDoc 		= ((CDrGrafApp*)AfxGetApp())->GetDocument(); 
	CObjectMgr* pObjectMgr 	= pDoc->GetObjectMgr();
	CMsObjMgr* pMsObjMgr 	= pDoc->GetMsObjMgr();
	//////////////////////////////////////////////////////////////////
	CString ID;
	CString* pID = &ID;
	///////////////////////////////////////////////////////// Is Enough Info?
	if(RightUp_Premature()<0)
		return;
	///////////////////////////////////////////////////////// Not Auto Accept
	if(m_bStitch)
	{
		if(RightUp_NotAutoAccept_3STITCH()<0)
		{
			Terminate_SOL(TRUE);
			return;
		}
	}
	else
	{
		////////////////////////////////////////////////// Update Info
		UpdateDlg_TRUE();
		/////////////////
		if(RightUp_NotAutoAccept()<0)
		{
			Terminate_SOL(TRUE);
			return;
		}
	}
	///////////////////////////////////////////////////// Show Spawned Node 
	switch(m_nActiveTool) 
	{

		case COP_TRANSLATE:
						
			
			SetUpLocalM_XLATE();
			/////////////////////////////
			if(ShowMesh3DToSpawn(m_pParentMesh3D,FALSE)<0)		 //FALSE = NoDlg
			////////////////
			{
				Terminate_SOL(TRUE);
				return;
			}
			else
			{
				Terminate_SOL(FALSE);
				Init_SOL();
				/////////////////////////
				UpdateDlg_FALSE_XLATE();
				break;
			}
			///////////////////	
			break;

			
		case COP_ROTATE:
						
			
			SetUpLocalM_ROTATE();
			/////////////////////////////
			if(ShowMesh3DToSpawn(m_pParentMesh3D,FALSE)<0)		 //FALSE = NoDlg
			////////////////
			{
				Terminate_SOL(TRUE);
				return;
			}
			else
			{
				Terminate_SOL(FALSE);
				Init_SOL();
				/////////////////////////
				UpdateDlg_FALSE_ROTATE();
				break;
			}
			///////////////////	
			break;
		
		case COP_SCALE:
						
			
			SetUpLocalM_SCALE();
			/////////////////////////////
			if(ShowMesh3DToSpawn(m_pParentMesh3D,FALSE)<0)		 //FALSE = NoDlg
			////////////////
			{
				Terminate_SOL(TRUE);
				return;
			}
			else
			{
				Terminate_SOL(FALSE);
				Init_SOL();
				/////////////////////////
				UpdateDlg_FALSE_SCALE();
				break;
			}
			///////////////////	
			break;
		
		case COP_REFLECT:
						
			
			SetUpLocalM_REFLECT();
			/////////////////////////////
			if(ShowMesh3DToSpawn(m_pParentMesh3D,FALSE)<0)		 //FALSE = NoDlg
			////////////////
			{
				Terminate_SOL(TRUE);
				return;
			}
			else
			{
				Terminate_SOL(FALSE);
				Init_SOL();
				/////////////////////////
				UpdateDlg_FALSE_REFLECT();
				break;
			}
			///////////////////	
			break;
		
		case COP_SHEAR:
						
			
			SetUpLocalM_SHEAR();
			/////////////////////////////
			if(ShowMesh3DToSpawn(m_pParentMesh3D,FALSE)<0)		 //FALSE = NoDlg
			////////////////
			{
				Terminate_SOL(TRUE);
				return;
			}
			else
			{
				Terminate_SOL(FALSE);
				Init_SOL();
				/////////////////////////
				UpdateDlg_FALSE_SHEAR();
				break;
			}
			///////////////////	
			break;
		

		
		case COP_SPAWN:
		
			//////////////////////////// 	
			return;



		case COP_STITCH:
		
			/////////////////////////////
			if(Show3ProfileToStitch()<0)		
			////////////////
			{
				Terminate_SOL(TRUE);
				return;
			}
			else
			{
				Terminate_SOL(FALSE);
				Init_SOL();
				/////////////////////////
				Update_Status_3STITCH();
				break;
			}
			///////////////////	
			break;
		//////////////	
		default:  
			return;
	}
	/////////////////////////////
	CMI_Gang0 Gang0;
	Gang0.SetElemInfoID(m_SpawnedID,MESH3D);		
	/////////////////////////////////////////// Node
}

int CMs3CreOM::RightUp_NotAutoAccept_3STITCH()
{
/*
	CDrGrafFrame* pWnd	= (CDrGrafFrame*)AfxGetMainWnd();
	CString strCurr;
	////////////
	CDrGrafDoc* pDoc 		= ((CDrGrafApp*)AfxGetApp())->GetDocument(); 
	CObjectMgr* pObjectMgr  = pDoc->GetObjectMgr();
	CDListMgr*	pList;
*/
	////////////////////////////////////////////////////// 
	int nAnswer = IDOK;
	////////////////////////////////
	if(!m_bAutoAcceptOn)
	{
		///////////////////////////////////////////////////////////// show Info
		nAnswer = ShowInputInfo_3STITCH();
		if(nAnswer == -1)
			return -1;
		/////////////////////////
		if(nAnswer == -2)
		{
			CString* str = new CString;
			char* buf	= str->GetBuffer(BUFF_SIZE);
			sprintf(buf,"Do You Want to Delete\nCurrent MESH3D Profile to Start Allover");
			/////////////////////////	
			nAnswer = AfxMessageBox(*str,MB_YESNO|MB_ICONQUESTION);
			delete str;
			/////////////////////////
			if(nAnswer == IDYES)		//delete
			{
				/////////////////////////////////////// Reset
				m_nInfoDone		= 0;	// 
				m_bDone			= TRUE;	// 
				/////////////////////////////////////
				return -1;
			}
		}
		/////////////////////
		return 0; 
	}
	/////////
	return 0;
}

int CMs3CreOM::ShowInputInfo_3STITCH()
{
	UINT nAnswer;
	///////////////////////////////////////////////////////////// show Info:DoModal
	CMMs3Mgr	MMs3Mgr;
	nAnswer = MMs3Mgr.DoModal_Merge_3_ShowInfo(&m_SpawnedID,&m_Mesh3DList);  	//Profile
	if(nAnswer == IDCANCEL)
		return -2;	// CAncel
	else
		return 0;
}

long CMs3CreOM::CreateorActivateCreOp_SOL(UINT wParam, long lParam)
{
	/////////////////////////////////////////// Parent Info
	m_ParentType	= MESH3D;
	m_strParentType = "MESH3D";
	/////////////////////////////////////////////////////////
	GetCreOpDlg()->m_CreOp = m_CreOp;
	///////////////////////////////////////
	if(GetCreOpDlg()->GetSafeHwnd() ==0)	// not created already
	{
		GetCreOpDlg()->Create();
		CRect BoxRect;
		CWnd  wndTopMost;
		GetCreOpDlg()->GetWindowRect(&BoxRect);
		SizeRectDlgIn(BoxRect);
		//////////////////////////////////////////////////////////////
		GetCreOpDlg()->SetWindowPos(&wndTopMost,BoxRect.left,BoxRect.top,BoxRect.Width(),
                        BoxRect.Height(),SWP_NOZORDER|SWP_SHOWWINDOW);
		//////////////////////////////////////////////////////////////
		Init_SOL();

	}
	else
	{
		GetCreOpDlg()->SetActiveWindow();
		GetCreOpDlg()->m_CreOp = m_CreOp;
	}
	////////////////
	switch(m_CreOp)
	{
		case COP_TRANSLATE:
			//////////////////////////////
			UpdateDlg_FALSE_XLATE();
			////
			break;
		case COP_ROTATE:
			//////////////////////////////
			UpdateDlg_FALSE_ROTATE();
			////
			break;
		case COP_SCALE:
			//////////////////////////////
			UpdateDlg_FALSE_SCALE();
			////
			break;
		case COP_REFLECT:
			//////////////////////////////
			UpdateDlg_FALSE_REFLECT();
			////
			break;
		case COP_SHEAR:
			//////////////////////////////
			UpdateDlg_FALSE_SHEAR();
			////
			break;
		case COP_SPAWN:
			//////////////////////////////
//			UpdateDlg_FALSE_SPAWN();
			////
			break;
		case COP_STITCH:
			//////////////////////////////
//			UpdateDlg_FALSE_SPAWN();
			////
			break;
		default:
			break;
	}
	///////////////////////////////////////////////////////////////// if CreODlg Open
	if(GetCreOpDlg()->m_hWnd)
	{
/*
		CStatic* pCtl;
		pCtl = (CStatic*)(GetCreOpDlg()->GetDlgItem(IDC_OTHER));
		////////////////////////////////////////////////////////
		if((UINT)(pWnd->GetActiveViewNumber()) == VIEW12)
			pCtl->SetWindowText("Z");
		else
		if((UINT)(pWnd->GetActiveViewNumber()) == VIEW23)
			pCtl->SetWindowText("X");
		else
		if((UINT)(pWnd->GetActiveViewNumber()) == VIEW31)
			pCtl->SetWindowText("Y");
		else
		if((UINT)(pWnd->GetActiveViewNumber()) == VIEWISO)
		{
			pWnd->SendMessage(ID_GOODBYE_CREOP,IDOK);
			return 0L;
		}
*/

	}

	return 0L;
}
	 
long CMs3CreOM::GoodByeCreOp_SOL(UINT wParam, long lParam)
{
	
	GetCreOpDlg()->DestroyWindow();
	////////////////
	{
		Terminate_SOL(FALSE);
		return 0L;
	}
	//////////
	return 0L;
}
	 
long CMs3CreOM::CancelCreOp_SOL(UINT wParam, long lParam)
{
	
	GetCreOpDlg()->DestroyWindow();
	////////////////
	{
		Terminate_SOL(FALSE);
		return 0L;
	}
	//////////
	return 0L;
}
	 
/////////////////////////////////////////////////////////////////////////////////////// 
UINT CMs3CreOM::ReSetToolID_SOL(UINT CntlID,UINT IGenID, UINT OperID)
{
	CDrGrafFrame* pWnd	= (CDrGrafFrame*)AfxGetMainWnd();
	CString strCur;
	////////////////
	CString str;
	UINT ID;
	///////////////////////////////////
	if(IGenID != MESH3D)
	{
		str = "UNKNOWN";	ID	= UNONE;
		pWnd->SetstrIGenID(str);
		////////////////////////
		return UNONE;
	}
	//////////////////////////////////////////// TaskID
	if(OperID == COP_STITCH)
		strCur = "Ready for Merging MESH3Ds@";
	else
		strCur = "Ready for Spawning a MESH3D@";
	/////////////////////////////
	switch(CntlID)
	{
		//////////////////////////////////////// Elements
		case ELEMENT:
//					pWnd->SetMouseBoxType(ELEMDIMBOX);
			str = "ELEMENT";
			pWnd->SetIGenBoxStatus(TRUE);
			pWnd->SetCntlBoxStatus(FALSE);
			pWnd->SetDrawBoxStatus(FALSE);
			///////////
			pWnd->SetstrCntlID(str);
			////////////////////////
			switch(OperID)
			{
				//////////////////////////////////////////// Create
				case COP_TRANSLATE:
					///////////////////////////// String
					str = "TRANSLATE";
					pWnd->SetstrOperID(str);
					///////////////////////////////////// 
					str	= "MESH3D";		ID	= COP_TRANSLATE;
						strCur += "Click on a MESH3D to Translate";
					break;
				//////////////////////////////////////////// Create
				case COP_ROTATE:
					///////////////////////////// String
					str = "ROTATE";
					pWnd->SetstrOperID(str);
					///////////////////////////////////// 
					str	= "MESH3D";		ID	= COP_ROTATE;
						strCur += "Click on a MESH3D to Rotate";
					break;
				//////////////////////////////////////////// Create
				case COP_SCALE:
					///////////////////////////// String
					str = "SCALE";
					pWnd->SetstrOperID(str);
					///////////////////////////////////// 
					str	= "MESH3D";		ID	= COP_SCALE;
						strCur += "Click on a MESH3D to Scale";
					break;
				//////////////////////////////////////////// Create
				case COP_REFLECT:
					///////////////////////////// String
					str = "REFLECT";
					pWnd->SetstrOperID(str);
					///////////////////////////////////// 
					str	= "MESH3D";		ID	= COP_REFLECT;
						strCur += "Click on a MESH3D to Reflect";
					break;
				//////////////////////////////////////////// Create
				case COP_SHEAR:
					///////////////////////////// String
					str = "SHEAR";
					pWnd->SetstrOperID(str);
					///////////////////////////////////// 
					str	= "MESH3D";		ID	= COP_SHEAR;
						strCur += "Click on a MESH3D to Shear";
					break;
				//////////////////////////////////////////// Create
				case COP_SPAWN:

					Init_SOL();	// No Modeless Dlg, so Init Here
					///////////////////////////// String
					str = "SPAWN";
					pWnd->SetstrOperID(str);
					///////////////////////////////////// 
					str	= "MESH3D";		ID	= COP_SPAWN;
						strCur = "Composite Affine/Symmetry Transformations@";
						strCur += "Click on a MESH3D to Spawn";
					break;
				//////////////////////////////////////////// Create
				case COP_STITCH:

					Init_SOL();	// No Modeless Dlg, so Init Here
					///////////////////////////// String
					str = "STITCH";
					pWnd->SetstrOperID(str);
					///////////////////////////////////// 
					str	= "MESH3D";		ID	= COP_STITCH;
						strCur += "Click on a MESH3D to Stitch In";
					break;
				//////////////////////////////////////////// Create
				default:
					///////////////////////////// String
					str = "DON'T KNOW";
					pWnd->SetstrOperID(str);
					///////////////////////////////////// 
					ID	= UNONE;
					strCur = "UNKNOWN Spawing Option";
					pWnd->SetstrCurrID(strCur);
					break;
			}
			////////////////////////////////////////////////// Overriding everyID above
			ID = OperID;		// afterthought
			//////////////////////////////////////////// CreOp
			m_CreOp = OperID;
			////////////////////////////////////////////////// 
			pWnd->SetstrIGenID(str);
			pWnd->SetstrCurrID(strCur);
			//////////
			return ID;

		default:
			break;
	}
	return UNONE;
}

void CMs3CreOM::Serialize(CArchive& ar)
{

	CMs2CreOp::Serialize( ar);              // must call base class Serializer
	/////////////////////////
	if (ar.IsStoring())
	{
		TRACE(" Ms3CreOp:    Storing\n");	
		

	}
	else
	{
		TRACE(" Ms3CreOp:    Loading\n");	

	
	}        
}
///////////////////////////////////// end of Module //////////////////////		

