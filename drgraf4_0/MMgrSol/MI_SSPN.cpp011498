// Rotate.cpp : implementation file
//


#include "stdafx.h"

#include "math.h"
#include "XForm.h"

#include "drgraf.h"
/////////////////////
#include "drgradoc.h"
#include "ObjMgr.h"
#include "NewObjs.h"
#include "DListMgr.h"
///////////////////// elements
#include "Def_IGen.h"
///////////////////// elements
#include "DrLabel.h"
///////////////////// dialogMgr
#include "MSolMgr.h"
#include "Mi_GangS.h"
#include "Dlg_SpnS.h"
////////////////////
#include "MI_SSPN.h" 

#ifdef _DEBUG
#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
#endif

#define new	DEBUG_NEW
#define	BUFF_SIZE			1024
#define MIN_CNODES_CURVE	4
#define	NUM_LEN				12 
#define	MAX_SEG_ANGLE		120
////////////////////////////////////
IMPLEMENT_SERIAL(CMI_SSPN,CMI_PSPN,1)
/////////////////////////////////////////////////////////////////////////////
CMI_SSPN::CMI_SSPN()
{
	m_pContextSol = NULL;
}

CMI_SSPN::~CMI_SSPN()
{
}

int CMI_SSPN::SpawnSolidShowingDlg(CDrSolid* pNewSolid,CDrSolid* pOldSolid, 
									CDrObject* pContextObj, UINT nContextType)  
{

	CDrGrafDoc* pDoc 		= ((CDrGrafApp*)AfxGetApp())->GetDocument(); 
	CObjectMgr* pObjectMgr 	= pDoc->GetObjectMgr();
	////////////////////////////////////////////////////////////////
	switch(nContextType)
	{
		case SOLID:
			m_pContextSol = (CDrSolid*)pContextObj;
			break;
		case OBJ3D:
			m_pContextO3D = (CDrObj3D*)pContextObj;
			break;
		default:
			AfxMessageBox("ERROR:CMI_SSPN::SSpawn\nILLEGAL nContextType");
			return -1;
	}
	/////////////////////
	m_pDrSolid = pNewSolid;
	//////////////////////////////////////////////////////////////////
	CString		ID;
	CString*	pID = &ID;
	////////////////////////////////////////////////////////////////
	int nResult = GetInfoFromDlg(m_pDrSolid,pOldSolid);                  	// 
	if(nResult<0)
		return nResult;//
	///////////////////////////////////////////////////////////////////// Go Generate	
	if(m_pDrSolid)
	{
		; // do nothing
/*
		CString* str = new CString;
		char* buf = str->GetBuffer(80);
				
		sprintf(buf,"Got All Solid Spawning Info");
		/////////////////////////	
		AfxMessageBox(*str);
		/////////////////////////
		str->ReleaseBuffer();
		delete str;
*/
	}	
	else
		return -1;	// Cancel
	///////////////////////////////// Spawn Nodes
	MATRIX Mat;
	///////////
	if(m_pDrSolid->IsInstanced())
	{
		CMatObj* pMatObj	= m_pDrSolid->GetMatObj();
		Mat					= *(pMatObj->GetMatrix());
		/////////////////////
		if(SpawnSolid(&Mat)<0)
			return -1;
		/////////////////////
	}
	else
	{
		MATRIX Mat;
		C3DMath Math3D;
		Math3D.GetIdentityMATRIX(&Mat);
		/////////////////////
		if(SpawnSolid(&Mat)<0)
			return -1;
		/////////////////////
	}
	///////////////////////////// make it Unposted 
	m_pDrSolid->SetPosted(FALSE);
	////////////////////////////////////// LOCAL 3DBounds using
										// ConVexHull Property
	m_pDrSolid->Calc_3DBoundsLocal();
	/////////
	return 0;		 
}			
	 
int CMI_SSPN::GetInfoFromDlg(CDrSolid* pNewSolid,CDrSolid* pOldSolid)
{
	CDrGrafDoc* pDoc 		= ((CDrGrafApp*)AfxGetApp())->GetDocument(); 
	CObjectMgr* pObjectMgr 	= pDoc->GetObjectMgr();
	//////////////////////////////////////////////////////////////////
	CMSolMgr* 	pMSolMgr;
	CString		Cid = pNewSolid->GetObjectID();
	CString		ParentID = pOldSolid->GetObjectID(); 
	///////////////////////////////////////////////////
	if (pMSolMgr->DoModal_Spawn_S(pNewSolid,&Cid,ParentID) == IDCANCEL)
		return -2; 
	//////////
	return 0;
}
	 
int CMI_SSPN::SpawnSolid(pMATRIX pXFMat)
{
	CDrGrafDoc* pDoc 		= ((CDrGrafApp*)AfxGetApp())->GetDocument(); 
	CObjectMgr* pObjectMgr 	= pDoc->GetObjectMgr();
	CDListMgr*	pDListMgr;
	//////////////////////////////////////////////////////////////////
	CString		Cid;
	////////////////////////////////////////////////////////////////// Lists
	SpawnListsInSolid(pXFMat);
	//////////
	int index;
	////////////////////////////////////////////////////////////////// Node Spawn : FromID_R
	CDrNode* pOldNode;
	CString	 NewNID;
//	CString	FromID_R;		// also used:AnchorID for Sweep/Duct
	Cid = m_pDrSolid->GetFromID_R();
	if(Cid != "")
	{
		///////////////////////////////// 
		index = pObjectMgr->
				GetObjectIndexfromKey(CNODE,Cid,1);
		pDListMgr 	= pObjectMgr->GetObjectList(CNODE);
		if(index>=0)
			pOldNode = (CDrNode*)(pDListMgr->GetObject(index));
		else
			pOldNode = NULL;
		////////////////
		if(pOldNode)
		{
			/////////////////////////////////////////////////////////////////  New
			int nActiveIndex;
			CDrNode* pNewNode = (CDrNode*)(pObjectMgr->AddToDataBase(nActiveIndex,CNODE));
			/////////////////////
			m_pDrNode = pNewNode;
			///////////////////////////////////////// Get ID
			NewNID = "";	// force it to create a name
			int nResult = SpawnNodeWithoutDlg(pNewNode,pOldNode,pXFMat,&NewNID,
														TRUE,m_pDrSolid,SOLID);	// changes
			///////////////////////
			if(nResult<0)
			{
				///////////////////////////////////////// delete
				pDListMgr = pObjectMgr->GetObjectList(CNODE);
				nActiveIndex = pDListMgr->GetObjectIndex(pNewNode);
				if(nActiveIndex>=0)
					pObjectMgr->DeleteFromDataBase(nActiveIndex, CNODE);
				return -1;
			}
			////////////////////////////////////////////////////////////////// Label
			pNewNode->SetObjectID(NewNID);
			(pNewNode->GetNodeCard())->id = NewNID;
			///
			CMI_GangN	GangN;
			int			nLabelIndex;
			GangN.Setid(pNewNode->GetObjectID());
			CDrLabel* pLabel = GangN.CreateNodeLabel(pNewNode,nLabelIndex);
			if(!pLabel)
				return -1;
			//////////////
			m_pDrSolid->SetFromID_R(NewNID); //FromID_R 
			//////////////////////////////////////// Reciprocate
			pNewNode->GetSolidList()->InsertObject(m_pDrSolid);
			////////
		}
	}
	////////////////////////////////////////////////////////////////// Node Spawn : ToID_T
//	CString	ToID_R;		// also used:AnchorID for Sweep/Duct
	Cid = m_pDrSolid->GetToID_R();
	if(Cid != "")
	{
		///////////////////////////////// 
		index = pObjectMgr->
				GetObjectIndexfromKey(CNODE,Cid,1);
		pDListMgr 	= pObjectMgr->GetObjectList(CNODE);
		if(index>=0)
			pOldNode = (CDrNode*)(pDListMgr->GetObject(index));
		else
			pOldNode = NULL;
		////////////////
		if(pOldNode)
		{
			/////////////////////////////////////////////////////////////////  New
			int nActiveIndex;
			CDrNode* pNewNode = (CDrNode*)(pObjectMgr->AddToDataBase(nActiveIndex,CNODE));
			/////////////////////
			m_pDrNode = pNewNode;
			///////////////////////////////////////// Get ID
			NewNID = "";	// force it to create a name
			int nResult = SpawnNodeWithoutDlg(pNewNode,pOldNode,pXFMat,&NewNID,
														TRUE,m_pDrSolid,SOLID);	// changes
			///////////////////////
			if(nResult<0)
			{
				///////////////////////////////////////// delete
				pDListMgr = pObjectMgr->GetObjectList(CNODE);
				nActiveIndex = pDListMgr->GetObjectIndex(pNewNode);
				if(nActiveIndex>=0)
					pObjectMgr->DeleteFromDataBase(nActiveIndex, CNODE);
				return -1;
			}
			////////////////////////////////////////////////////////////////// Label
			pNewNode->SetObjectID(NewNID);
			(pNewNode->GetNodeCard())->id = NewNID;
			///
			CMI_GangN	GangN;
			int			nLabelIndex;
			GangN.Setid(pNewNode->GetObjectID());
			CDrLabel* pLabel = GangN.CreateNodeLabel(pNewNode,nLabelIndex);
			if(!pLabel)
				return -1;
			//////////////
			m_pDrSolid->SetToID_R(NewNID); //FromID_R 
			//////////////////////////////////////// Reciprocate
			pNewNode->GetSolidList()->InsertObject(m_pDrSolid);
			////////
		}
	}
	/////////////////////////////////
	// todo: after changing to String in DrSolid.h
//	WORLD		m_Center_T;	// Circle
	///////////////////////////////
	return 0;
}

int CMI_SSPN::SpawnListsInSolid(pMATRIX pXFMat)
{
	CDrGrafDoc* pDoc 		= ((CDrGrafApp*)AfxGetApp())->GetDocument(); 
	CObjectMgr* pObjectMgr 	= pDoc->GetObjectMgr();
	////////////////////////
	CDListMgr*	pList;
	int			nResult;
	///////////////////////////////////////////////////////////////// PatchList
    pList			= m_pDrSolid->GetPatchList();
	int nMaxPatches	= pList->GetCount();
	//////////
	if(pList && (nMaxPatches>0))
	{
		nResult = SpawnPatchListInSolid(pList,pXFMat);
		if(nResult<0)
			return -1;
/*
		///////////////////////////////////////////////////////// COONs:Remove Duplicate Edge Nodes todo
		//?????????????todo	 Circular Curves:  ?????????????????????????????????
		if	(
				(m_pDrSolid->GetSolidProc() == PP_COONS) || 
				(m_pDrSolid->GetSolidProc() == PP_LOFT3) ||
				(m_pDrSolid->GetSolidProc() == PP_LOFT4) 
			)
*/
		////////////////////////////// Reciprocate
		ReciprocateSolidPatches(pList);
	}
	///////////////////////////////////////////////////////////////// CurveList
    pList			= m_pDrSolid->GetCurveList();
	int nMaxCurves	= pList->GetCount();
	//////////
	if(pList && (nMaxCurves>0))
	{
		nResult = SpawnCurveListInSolid(pList,pXFMat);
		if(nResult<0)
			return -1;
		////////////////////////////// Reciprocate
		ReciprocateSolidCurves(pList);
	}
	///////////////////////////////////////////////////////////////// NodeLists
	/////////////////////////////////////////////////////////// CNode
    pList = m_pDrSolid->GetCNodeList();
	if(pList)
	{
		nResult = SpawnNodeListinSolid(pList, pXFMat, TRUE);
		if(nResult<0)
			return -1;
		////////////////////////////// Reciprocate
		ReciprocateSolidNodes(pList);
	}
	/////////////////////////////////////////////////////////// CN_BS
    pList = m_pDrSolid->GetCN_BSList();
	if(pList)
	{
		nResult = SpawnNodeListinSolid(pList, pXFMat, TRUE);
		if(nResult<0)
			return -1;
		////////////////////////////// Reciprocate
		ReciprocateSolidNodes(pList);
	}
	/////////////////////////////////////////////////////////// INode
    pList = m_pDrSolid->GetINodeList();
	if(pList)
	{
		nResult = SpawnNodeListinSolid(pList, pXFMat, FALSE);
		if(nResult<0)
			return -1;
		////////////////////////////// Reciprocate
		ReciprocateSolidNodes(pList);
	}
	/////////////////////////////////////////////////////////// ENode
    pList = m_pDrSolid->GetENodeList();
	if(pList)
	{
		nResult = SpawnNodeListinSolid(pList, pXFMat, FALSE);
		if(nResult<0)
			return -1;
		////////////////////////////// Reciprocate
		ReciprocateSolidNodes(pList);
	}
	/////////////////////////////////////////////////////////// Node
    pList = m_pDrSolid->GetNodeList();
	if(pList)
	{
		nResult = SpawnNodeListinSolid(pList, pXFMat, FALSE);
		if(nResult<0)
			return -1;
		////////////////////////////// Reciprocate
		ReciprocateSolidNodes(pList);
	}
	/////////////////////////////
	return 0;
	//////////////////////////////////////////////////////////////// Penta List 
	CString Cid = m_pDrSolid->GetParentID();
	////
	SpawnPentaList(Cid, pXFMat);
	/////////////////
	return 0;
}

int CMI_SSPN::SpawnNodeListinSolid(CDListMgr* pFillList, pMATRIX pXFMat, BOOL bCNode)
{
	if(pFillList->IsEmpty())
		return 0;
	////////////////////////
	CDrGrafDoc* pDoc 		= ((CDrGrafApp*)AfxGetApp())->GetDocument(); 
	CObjectMgr* pObjectMgr 	= pDoc->GetObjectMgr();
	CDListMgr* pDListMgr;
	//////////////////////////////////////////////////////////////////
	CDListMgr TempList;
	////////////////////////////////////////////////// copy
	POSITION pos = pFillList->GetFirstObjectPos();
	for (;pos !=NULL;)
		TempList.AddTail(pFillList->GetNextObject( pos));
	////////////////////////////////////////////////// Empty it
	pFillList->RemoveAll();
	/////////////////////////////////////////////////////////////////// XForm 
	int			nMaxNodes;
	CString		NewNID;
	int s;
	/////////////////////////////////////////////////////////// Data
	nMaxNodes		 	= TempList.GetCount();
	////////////////////////////////////////// 	
	for (s = 0; s<nMaxNodes; s++)
	{
		CDrNode* pOldNode = (CDrNode*)TempList.GetObject( s);
		//////////////////////////////////////////////////////////////////////
		//		CONTROL Nodes are Private
		//////////////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////  New
		int			nActiveIndex;
		CDrNode*	pNewNode;
		/////////////////////
		if(bCNode)
		{
			CNewObjs NewObjs;
			pNewNode = (CDrNode*)(NewObjs.NewObject(NODE));
		}
		else
			pNewNode = (CDrNode*)(pObjectMgr->AddToDataBase(nActiveIndex,NODE));
		/////////////////////
		m_pDrNode = pNewNode;
		///////////////////////////////////////// Get ID
		NewNID = "";	// force it to create a name
		int nResult = SpawnNodeWithoutDlg(pNewNode,pOldNode,pXFMat,&NewNID,
													bCNode,m_pDrSolid,SOLID);
		///////////////////////////////////// in Curve 
		if(nResult<0)
		{
			///////////////////////////////////////// delete
			pDListMgr = pObjectMgr->GetObjectList(NODE);
			nActiveIndex = pDListMgr->GetObjectIndex(pNewNode);
			if(nActiveIndex>=0)
				pObjectMgr->DeleteFromDataBase(nActiveIndex, NODE);
			return -1;
		}
		//////////////
		pFillList->InsertObject(pNewNode); //CNodeList 
		////////
	}				
	///////////////////////////////////////////////////////// Empty it
	TempList.RemoveAll();
	////////////
	return 0;
}

int CMI_SSPN::SpawnPentaList(CString Cid, pMATRIX pXFMat)
{
	CDrGrafDoc* pDoc 		= ((CDrGrafApp*)AfxGetApp())->GetDocument(); 
	CObjectMgr* pObjectMgr 	= pDoc->GetObjectMgr();
	CDListMgr* pDListMgr 	= pObjectMgr->GetObjectList(SOLID);
	//////////////////////////////////////////////////////////////////
	int index;
	CDrSolid* pOldSolid;
	/////////
	index = pObjectMgr->GetObjectIndexfromKey(SOLID,Cid,1);
	if(index>=0)
		pOldSolid = (CDrSolid*)(pDListMgr->GetObject(index));
	else
		pOldSolid = NULL;
		////////////////
	if(pOldSolid)
	{
		CDListMgr* pOldList = pOldSolid->GetPentaList();
		if(pOldList->IsEmpty() )
			return 0;
		////////////////////////
		CDListMgr* pNewList = m_pDrSolid->GetPentaList();
		pNewList->RemoveAll();
		////////////////////////////////////////////////// copy
		POSITION pos = pOldList->GetFirstObjectPos();
		for (;pos !=NULL;)
			pNewList->AddTail(pOldList->GetNextObject( pos));
		///////
	}
	/////////
	return 0;
}
	 		
int CMI_SSPN::SpawnCurveListInSolid(CDListMgr* pFillList, pMATRIX pXFMat)
{
	if(pFillList->IsEmpty())
		return 0;
	////////////////////////
	CDrGrafDoc* pDoc 		= ((CDrGrafApp*)AfxGetApp())->GetDocument(); 
	CObjectMgr* pObjectMgr 	= pDoc->GetObjectMgr();
	CDListMgr* pDListMgr 	= pObjectMgr->GetObjectList(CURVE);
	//////////////////////////////////////////////////////////////////
	CDListMgr TempList;
	////////////////////////////////////////////////// copy
	POSITION pos = pFillList->GetFirstObjectPos();
	for (;pos !=NULL;)
		TempList.AddTail(pFillList->GetNextObject( pos));
	////////////////////////////////////////////////// Empty it
	pFillList->RemoveAll();
	/////////////////////////////////////////////////////////////////// XForm 
	int			nMaxNodes;
	CString		NewCID;
	int s;
	/////////////////////////////////////////////////////////////////// XForm 
	nMaxNodes		 	= TempList.GetCount();
	////////////////////////////////////////// 	
	for ( s = 0; s<nMaxNodes; s++)
	{
		CDrCurve* pOldCurve = (CDrCurve*)TempList.GetObject( s);
		/////////////////////////////////////////////////////////////////  New
		int nActiveIndex;
		CDrCurve* pNewCurve = (CDrCurve*)(pObjectMgr->AddToDataBase(nActiveIndex,CURVE));
		///////////////////////
		m_pDrCurve = pNewCurve;
		///////////////////////////////////////// Get ID
		NewCID = "";	// force it to create a name
		int nResult = SpawnCurveWithoutDlg(pNewCurve,pOldCurve,pXFMat,&NewCID,
															m_pDrSolid,SOLID);
		///////////////////////////////////// in Curve 
		if(nResult<0)
		{
			///////////////////////////////////////// delete
			pDListMgr = pObjectMgr->GetObjectList(CURVE);
			nActiveIndex = pDListMgr->GetObjectIndex(pNewCurve);
			if(nActiveIndex>=0)
				pObjectMgr->DeleteFromDataBase(nActiveIndex, CURVE);
			return -1;
		}
		/////////////////////// Put CurvIDs in Solid
		m_pDrSolid->SetCurveID(NewCID,s);
		////////////////
		pFillList->InsertObject(pNewCurve); //CNodeList 
		////////
	}				
	///////////////////////////////////////////////////////// Empty it
	TempList.RemoveAll();
	/////////
	return 0;
}
	 		
int CMI_SSPN::SpawnPatchListInSolid(CDListMgr* pFillList, pMATRIX pXFMat)
{
	if(pFillList->IsEmpty())
		return 0;
	////////////////////////
	CDrGrafDoc* pDoc 		= ((CDrGrafApp*)AfxGetApp())->GetDocument(); 
	CObjectMgr* pObjectMgr 	= pDoc->GetObjectMgr();
	CDListMgr* pDListMgr 	= pObjectMgr->GetObjectList(PATCH);
	//////////////////////////////////////////////////////////////////
	CDListMgr TempList;
	////////////////////////////////////////////////// copy
	POSITION pos = pFillList->GetFirstObjectPos();
	for (;pos !=NULL;)
		TempList.AddTail(pFillList->GetNextObject( pos));
	////////////////////////////////////////////////// Empty it
	pFillList->RemoveAll();
	/////////////////////////////////////////////////////////////////// XForm 
	int			nMaxNodes;
	CString		NewCID;
	int s;
	/////////////////////////////////////////////////////////////////// XForm 
	nMaxNodes		 	= TempList.GetCount();
	////////////////////////////////////////// 	
	for ( s = 0; s<nMaxNodes; s++)
	{
		CDrPatch* pOldPatch = (CDrPatch*)TempList.GetObject( s);
		/////////////////////////////////////////////////////////////////  New
		int nActiveIndex;
		CDrPatch* pNewPatch = (CDrPatch*)(pObjectMgr->AddToDataBase(nActiveIndex,PATCH));
		///////////////////////
		m_pDrPatch = pNewPatch;
		///////////////////////////////////////// Get ID
		NewCID = "";	// force it to create a name
		int nResult = SpawnPatchWithoutDlg(pNewPatch,pOldPatch,pXFMat,&NewCID,
															m_pDrSolid,SOLID);
		///////////////////////////////////// in Curve 
		if(nResult<0)
		{
			///////////////////////////////////////// delete
			pDListMgr = pObjectMgr->GetObjectList(PATCH);
			nActiveIndex = pDListMgr->GetObjectIndex(pNewPatch);
			if(nActiveIndex>=0)
				pObjectMgr->DeleteFromDataBase(nActiveIndex, PATCH);
			return -1;
		}
		/////////////////////// Put CurvIDs in Solid
		m_pDrSolid->SetCurveID(NewCID,s);
		////////////////
		pFillList->InsertObject(pNewPatch); //CNodeList 
		////////
	}				
	///////////////////////////////////////////////////////// Empty it
	TempList.RemoveAll();
	/////////
	return 0;
}

void CMI_SSPN::ReciprocateSolidNodes(CDListMgr* pList)
{
	if(!pList || pList->IsEmpty())
		return;
	///////////////////////////////////
	int s,nMaxNodes;
	nMaxNodes = pList->GetCount();
	/////////////////////////////
	for (s = 0; s<nMaxNodes; s++)
	{
		CDrNode* pNewNode	= (CDrNode*)(pList->GetObject(s));
		//////////////////////////////////////// Reciprocate
		pNewNode->GetSolidList()->InsertObject(m_pDrSolid);
		////////
	}
}

void CMI_SSPN::ReciprocateSolidCurves(CDListMgr* pList)
{
	if(!pList || pList->IsEmpty())
		return;
	///////////////////////////////////
	int s,nMaxCurves;
	nMaxCurves = pList->GetCount();
	/////////////////////////////
	for (s = 0; s<nMaxCurves; s++)
	{
		CDrCurve* pNewCurve	= (CDrCurve*)(pList->GetObject(s));
		//////////////////////////////////////// Reciprocate
		pNewCurve->GetSolidList()->InsertObject(m_pDrSolid);
		////////
	}
}

void CMI_SSPN::ReciprocateSolidPatches(CDListMgr* pList)
{
	if(!pList || pList->IsEmpty())
		return;
	///////////////////////////////////
	int s,nMaxCurves;
	nMaxCurves = pList->GetCount();
	/////////////////////////////
	for (s = 0; s<nMaxCurves; s++)
	{
		CDrPatch* pNewPatch	= (CDrPatch*)(pList->GetObject(s));
		//////////////////////////////////////// Reciprocate
		pNewPatch->GetSolidList()->InsertObject(m_pDrSolid);
		////////
	}
}
	 		
int CMI_SSPN::SpawnSolidWithoutDlg(CDrSolid* pNewSolid,CDrSolid* pOldSolid,pMATRIX pXFMat,
									CString* pCid,CDrObject* pContextObj,UINT nContextType)
{
	///////////////
	CDrGrafDoc* pDoc 		= ((CDrGrafApp*)AfxGetApp())->GetDocument(); 
	CObjectMgr* pObjectMgr 	= pDoc->GetObjectMgr();
	///////////////
	CString		SolidID="",Obj3DID="";
	//////////////////////////////////////////////////////////////// Name
	switch(nContextType)
	{
		case SOLID:
			m_pContextSol	= (CDrSolid*)pContextObj;
			SolidID			= pOldSolid->GetObjectID();  	
			break;
		case OBJ3D:
			m_pContextO3D	= (CDrObj3D*)pContextObj;
			Obj3DID			= m_pContextO3D->GetObjectID();  	
			SolidID			= pOldSolid->GetObjectID();  	
			break;
		default:
			AfxMessageBox("ERROR:CMI_SSPN::SpawnSolidWithoutDlg\nILLEGAL nContextType");
			return -1;
	}
	/////////////////////////////
	if(*pCid == "")
	{
		char buf[50];
		int nLastNum = pObjectMgr->GetLastObjectNo(SOLID);		// internal
		sprintf(buf,"%d",nLastNum);
		(*pCid) = "_S";
		(*pCid)	+= buf;
		pObjectMgr->BumpLastObjectNo(SOLID);		// bump it
	}
	////////////////////////////////////////////////////////////////// CREATE	
	m_pDrSolid = pNewSolid;
	/////////////////////
	SOLIDPROC	SProc;
	SProc		= pOldSolid->GetSolidProc();
	//////////////////////////
	m_pDrSolid->SetSolidProc(SProc);	// New Solid
	int nResult = FillSpawnedSolidDlgDataBase(m_pDrSolid,*pCid, SolidID);
	if(nResult<0)
		return nResult;
	///////////////////
	nResult = SpawnSolid(pXFMat);
	////////////////////
	if(nResult<0)
		return nResult;
	////////////////////////////////////// LOCAL 3DBounds using
										// ConVexHull Property
	m_pDrSolid->Calc_3DBoundsLocal();											
	///////////////////
	return 0;
}

int CMI_SSPN::FillSpawnedSolidDlgDataBase(CDrSolid* pDrSolid,CString& Cid,CString& ParentCid)
{

	//////////////////////////////////////////////////////
	CDrGrafDoc* pDoc 		= ((CDrGrafApp*)AfxGetApp())->GetDocument();
	CObjectMgr* pObjectMgr 	= pDoc->GetObjectMgr();
	////////////////////////////////////
	CDlg_SpnS	Dlg_SpnS;		
	////////////////////////////////////
	Dlg_SpnS.m_SpawnID		= Cid;
	Dlg_SpnS.m_bInstanced 	= FALSE;
	Dlg_SpnS.m_CID		 	= ParentCid;
	Dlg_SpnS.m_pMatObj 		= NULL;
	///////////////////////////////////////
	Dlg_SpnS.SetInfoForDataBase(pDrSolid);
	///////////////
    return 0;
}

void CMI_SSPN::Serialize(CArchive& ar)
{

	CMI_CSPN::Serialize( ar);              // must call base class Serializer
	/////////////////////////
	////////////////////////////
	if (ar.IsStoring())
	{
		TRACE(" CMI_SSPN:    Storing\n");	
		
 			/////////////////////////////////////////////////
 			//////////////////////////////

	}
	else
	{
		TRACE(" CMI_SSPN:    Loading\n");	

			/////////////////////////////////////////////////
 		//////////////////////////////
	
	}        
	//////////////////
}
///////////////////////////////// end of module //////////////////
