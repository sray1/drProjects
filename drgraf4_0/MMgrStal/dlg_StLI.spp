// Dlg_CurI.cpp : implementation file
//

#include "stdafx.h"
#include "MStLDll.h"
#include "Def_Objs.h"
#include "UserMsg.h"
#include "CommRsrc.h"

#include "dlg_StLI.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// CDlg_StLI dialog


CDlg_StLI::CDlg_StLI(CWnd* pWnd)
	: CDialog()                    // Modeless constructor
{
	//{{AFX_DATA_INIT(CDlg_StLI)
	m_dMx		= 0.0;
	m_dMy		= 0.0;
	m_dMz		= 0.0;
	m_dFx		= 0.0;
	m_dFy		= 0.0;
	m_dFz		= 0.0;
	m_LoadID	= _T("");
	m_bIsoPar	= FALSE;
	m_bAdvanced = FALSE;
	//}}AFX_DATA_INIT
	m_pWnd 		= pWnd;


}


void CDlg_StLI::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CDlg_StLI)
	DDX_Text(pDX, IDC_MX, m_dMx);
	DDX_Text(pDX, IDC_MY, m_dMy);
	DDX_Text(pDX, IDC_MZ, m_dMz);
	DDX_Text(pDX, IDC_FX, m_dFx);
	DDX_Text(pDX, IDC_FY, m_dFy);
	DDX_Text(pDX, IDC_FZ, m_dFz);
	DDX_CBString(pDX, IDC_LOADID, m_LoadID);
	DDX_Check(pDX, IDC_ISOPAR, m_bIsoPar);
	DDX_Check(pDX, IDC_ADVANCED, m_bAdvanced);
	//}}AFX_DATA_MAP
}


BEGIN_MESSAGE_MAP(CDlg_StLI, CDialog)
	//{{AFX_MSG_MAP(CDlg_StLI)
	ON_BN_CLICKED(IDC_UPDATE, OnUpdate)
	ON_CBN_SELCHANGE(IDC_LOADID, OnSelchangeLoadid)
	ON_BN_DOUBLECLICKED(IDC_UPDATE, OnUpdate)
	ON_BN_DOUBLECLICKED(IDCANCEL, OnCancel)
	ON_BN_CLICKED(IDC_ADVANCED, OnAdvanced)
	ON_BN_DOUBLECLICKED(IDC_ADVANCED, OnAdvanced)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()



/////////////////////////////////////////////////// resource switch
extern AFX_EXTENSION_MODULE NEAR extensionMStL_DLL;

/////////////////////////////////////////////////////////////////////////////
// CDlg_StLI message handlers

BOOL CDlg_StLI::OnInitDialog()
{
	CDialog::OnInitDialog();
	///////
	return TRUE;  // return TRUE  unless you set the focus to a control
}

BOOL CDlg_StLI::Create ()
{
	BOOL bOk;	
#ifdef _AFXDLL
#ifdef _DEBUG
	CString strRes;
	strRes.LoadString(IDS_CHECK_RESOURCE);
	TRACE("resource string = %s\n", (const char*) strRes); 
#endif

	HINSTANCE hInstResourceClient = AfxGetResourceHandle();
	AfxSetResourceHandle(extensionMStL_DLL.hModule); // uses server's instance handle 

#ifdef _DEBUG
	strRes.LoadString(IDS_CHECK_RESOURCE);
	TRACE("resource string = %s\n", (const char*) strRes);
//	return hInstResourceClient;  
#endif
#endif
	/////////////////////////////////////////////////////////////
	bOk = CDialog::Create(CDlg_StLI::IDD);
	///////////////////////////////////////
#ifdef _AFXDLL
//	CString strRes;
	AfxSetResourceHandle(hInstResourceClient); // restores client's instance handle

#ifdef _DEBUG
	strRes.LoadString(IDS_CHECK_RESOURCE);
	TRACE("resource string = %s\n", (const char*) strRes); 
#endif
#endif
	//////////////////
	return bOk;
}


void CDlg_StLI::OnUpdate() 
{
	/////////////////
	UpdateData(TRUE);
	/////////////////
	if(m_pWnd ==NULL)
		return;
	/////////////////
	switch(m_Category)
	{
		case CA_FORCE:
			m_pWnd->SendMessage(ID_UPDATE_FANDMIN,IDC_UPDATE);
			break;
		case CA_DISPLACE:
			m_pWnd->SendMessage(ID_UPDATE_DANDRIN,IDC_UPDATE);
			break;
		case CA_THERMAL:
			m_pWnd->SendMessage(ID_UPDATE_THERMIN,IDC_UPDATE);
			break;
		case CA_PRESSURE:
			m_pWnd->SendMessage(ID_UPDATE_PRESSIN,IDC_UPDATE);
			break;
		case CA_LUMPWT:
			m_pWnd->SendMessage(ID_UPDATE_LUMPWTIN,IDC_UPDATE);
			break;
		default:
			break;
	}
}	

void CDlg_StLI::OnSelchangeLoadid() 
{
	/////////////////
	UpdateData(TRUE);
	/////////////////
	// TODO: Add your control notification handler code here
	
}

void CDlg_StLI::OnAdvanced() 
{
	/////////////////
	UpdateData(TRUE);
	/////////////////
	CDlg_StLA	dlg;
	//////////////////////////// Shut out Curve-related Stuff, if IsoPar; Handled in SLDMouse
	if(m_bIsoPar)
	{
		(dlg.GetDlgItem(IDC_ITEMHEAD))->SetWindowText("");
		(dlg.GetDlgItem(IDC_CID))->EnableWindow(FALSE);
		(dlg.GetDlgItem(IDC_CIDHEAD))->SetWindowText("");
		(dlg.GetDlgItem(IDC_ORIENT))->EnableWindow(FALSE);
		(dlg.GetDlgItem(IDC_ORIENTHEAD))->SetWindowText("");
		(dlg.GetDlgItem(IDC_SCALEHEAD))->SetWindowText("");
		(dlg.GetDlgItem(IDC_LINEARHEAD))->SetWindowText("");
		(dlg.GetDlgItem(IDC_STEPHEAD))->SetWindowText("");
		(dlg.GetDlgItem(IDC_STEP))->EnableWindow(FALSE);
		(dlg.GetDlgItem(IDC_STARTHEAD))->SetWindowText("");
		((CButton*)(dlg.GetDlgItem(IDC_INCREMENT)))->SetCheck(FALSE);
		(dlg.GetDlgItem(IDC_INCREMENT))->EnableWindow(FALSE);
	}
	else
	{
		/////////////////
		switch(m_Category)
		{
			case CA_FORCE:
				(dlg.GetDlgItem(IDC_ITEMHEAD))->SetWindowText("");
				break;
			case CA_DISPLACE:
				(dlg.GetDlgItem(IDC_ITEMHEAD))->SetWindowText("");
				break;
			case CA_THERMAL:
				(dlg.GetDlgItem(IDC_ITEMHEAD))->SetWindowText("Temperature");
				break;
			case CA_PRESSURE:
				(dlg.GetDlgItem(IDC_ITEMHEAD))->SetWindowText("Pressure");
				break;
			case CA_LUMPWT:
				(dlg.GetDlgItem(IDC_ITEMHEAD))->SetWindowText("LumpWeight");
				break;
			default:
				break;
		}
		/////////////////
		(dlg.GetDlgItem(IDC_CID))->EnableWindow(TRUE);
		(dlg.GetDlgItem(IDC_CIDHEAD))->SetWindowText("Curve ID");
		(dlg.GetDlgItem(IDC_ORIENT))->EnableWindow(TRUE);
		(dlg.GetDlgItem(IDC_ORIENTHEAD))->SetWindowText("Latch");
		(dlg.GetDlgItem(IDC_SCALEHEAD))->SetWindowText("Scale");
		(dlg.GetDlgItem(IDC_LINEARHEAD))->SetWindowText("Linear");
		(dlg.GetDlgItem(IDC_STEPHEAD))->SetWindowText("Step");
		(dlg.GetDlgItem(IDC_STEP))->EnableWindow(TRUE);
		(dlg.GetDlgItem(IDC_STARTHEAD))->SetWindowText("Starting Value");
//		((CButton*)(dlg.GetDlgItem(IDC_INCREMENT)))->SetCheck(FALSE);
		(dlg.GetDlgItem(IDC_INCREMENT))->EnableWindow(TRUE);
	}
	///////////////////////////////////////
	dlg.m_bTan			= m_bTan;
	dlg.m_NID			= m_NID;
	dlg.m_CID			= m_CID;
	dlg.m_bIncrement	= m_bIncrement;
	dlg.m_Orient		= m_Orient;
	dlg.m_dScale		= m_dScale;
	dlg.m_dStep			= m_dStep;
	dlg.m_dStart		= m_dStart;
	/////////////////////////////////////// Now Open Dialog/draw
	UINT nStatus = dlg.DoModal(); 
	if(nStatus == IDOK)
	{
		/////////////////////////////////////// update
		m_NID			= dlg.m_NID;
		m_bTan			= dlg.m_bTan;
		m_CID			= dlg.m_CID;
		m_bIncrement	= dlg.m_bIncrement;
		m_Orient		= dlg.m_Orient;
		m_dScale		= dlg.m_dScale;
		m_dStep			= dlg.m_dStep;
		m_dStart		= dlg.m_dStart;
		//////////////////////////////////
	}
	/////////////////
	if(m_pWnd ==NULL)
		return;
	/////////////////
	switch(m_Category)
	{
		case CA_FORCE:
			m_pWnd->SendMessage(ID_UPDATE_FANDMIN,IDC_UPDATE);
			break;
		case CA_DISPLACE:
			m_pWnd->SendMessage(ID_UPDATE_DANDRIN,IDC_UPDATE);
			break;
		case CA_THERMAL:
			m_pWnd->SendMessage(ID_UPDATE_THERMIN,IDC_UPDATE);
			break;
		case CA_PRESSURE:
			m_pWnd->SendMessage(ID_UPDATE_PRESSIN,IDC_UPDATE);
			break;
		case CA_LUMPWT:
			m_pWnd->SendMessage(ID_UPDATE_LUMPWTIN,IDC_UPDATE);
			break;
		default:
			break;
	}
	/////////////////
	
}

void CDlg_StLI::Advanced_FORCE(CDlg_StLA* pDlg) 
{
	if(m_dFx == 0.0 && m_dFy == 0.0 m_dFz == 0.0 )
		return;
	//////////////////////////////////////////////
	double dF[3];
	df[0]	= m_dFx;
	df[1]	= m_dFy;
	df[2]	= m_dFz;
	//////////////////////////// Shut out Curve-related Stuff, if IsoPar; Handled in SLDMouse
	pDlg->m_bTan		= m_bTan;
	pDlg->m_NID			= m_NID;
	////////////////////////////
	if(!m_bIsoPar)
	{
		(pDlg->GetDlgItem(IDC_ITEMHEAD))->SetWindowText("Force");
		///////////////////////////////////////
		pDlg->m_CID			= m_CID;
		pDlg->m_bIncrement	= m_bIncrement;
		pDlg->m_Orient		= m_Orient;
		pDlg->m_dScale		= m_dScale;
		pDlg->m_dStep		= m_dStep;
		pDlg->m_dStart		= m_dStart;
	}
	/////////////////////////////////////// Now Open Dialog/draw
	UINT nStatus = pDlg->DoModal(); 
	if(nStatus == IDOK)
	{
		/////////////////////////////////////// update
		m_NID			= pDlg->m_NID;
		m_bTan			= pDlg->m_bTan;
		m_CID			= pDlg->m_CID;
		m_bIncrement	= pDlg->m_bIncrement;
		m_Orient		= pDlg->m_Orient;
		m_dScale		= pDlg->m_dScale;
		m_dStep			= pDlg->m_dStep;
		m_dStart		= pDlg->m_dStart;
		//////////////////////////////////
	}
	/////////////////
	return;	
}


void CDlg_StLI::OnCancel() 
{
	/////////////////
	if(m_pWnd ==NULL)
		return;
	/////////////////
	switch(m_Category)
	{
		case CA_FORCE:
			m_pWnd->SendMessage(ID_CANCEL_FANDMIN,IDD_CANCEL);
			break;
		case CA_DISPLACE:
			m_pWnd->SendMessage(ID_CANCEL_DANDRIN,IDD_CANCEL);
			break;
		case CA_THERMAL:
			m_pWnd->SendMessage(ID_CANCEL_THERMIN,IDD_CANCEL);
			break;
		case CA_PRESSURE:
			m_pWnd->SendMessage(ID_CANCEL_PRESSIN,IDD_CANCEL);
			break;
		case CA_LUMPWT:
			m_pWnd->SendMessage(ID_CANCEL_LUMPWTIN,IDD_CANCEL);
			break;
		default:
			break;
	}
}
/////////////////////////// end of module //////////////
