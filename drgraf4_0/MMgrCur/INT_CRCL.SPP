// Mouse.cpp : implementation file
//


#include "stdafx.h" 
#include "math.h"

#include "drgraf.h"
#include "drgradoc.h"
#include "ObjMgr.h"
/////////////////////
#include "glb_Type.h"
#include "glb_CuPS.h"
/////////////////////
#include "3DMath.h" 
/////////////////////
#include "Inter_C1.h" 

#ifdef _DEBUG
#include <stdio.h>
#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////
IMPLEMENT_SERIAL(CIn_Circle,CObject,1)
/////////////////////////////////////
#define MIN_INODES_CURVE	2        
#define	new DEBUG_NEW
#define	BUFF_SIZE	1024
/////////////////////////////////////////////////////////////////////////////
CIn_Circle::CIn_Circle()
{
	/////////////////// Memory
	m_MemErr	= 0;
	m_pData		= NULL;
	m_pCon_BS_S	= NULL;
	m_pCon_BZ_S	= NULL;
}

CIn_Circle::~CIn_Circle()
{
	/////////////////// Memory
	if(m_MemErr<0)
	{
		if(m_pData)
			delete [] m_pData; 
		if(m_pCon_BS_S)
			delete [] m_pCon_BS_S; 
		if(m_pCon_BZ_S)
			delete [] m_pCon_BZ_S;
	}	
}
///////////////////////////////////////////////////////////////////////////////////// Interpolation
	//////////////////////////////////////////////////////////////////////////////
	//	NOTE:  BackGround:	k = Order; k-1 = Degree of Curve [ k=3 for Circle]	//
	//																			//
///////////////////////////////////////////////////////////////////////////////////////////////	
int CIn_Circle::Interpolate()
{
	//////////////////////////////////////
	m_pCon_BZ_S	= new WORLD [m_nCon_BZ_S];
	///////////
	if(!m_pCon_BZ_S )
	{
		AfxMessageBox("ERROR:Interpolate -Memory Failure!");
		m_MemErr = -1;
		return m_MemErr;
	}
	//////////////////////////////////////////////////////////////////////// Bezier Cons
	FillUpBezier(m_pCon_BZ_S,m_pData,m_nSeg_DT_S,m_bClosed_S);
	////////////////								
	if(m_pData)
	{
		delete [] m_pData;
		m_pData = NULL;
	}	
	////////////////
	return 0;
}		

int CIn_Circle::Compute_Center_N_Radius(pWORLD Data, pWORLD Center, pDOUBLE Radius)
{

}

int CIn_Circle::Compute_Phi_Si(pWORLD Data, pDOUBLE phi, pDOUBLE si)
{
	// Compute Phi and Si in degrees: Should be called from Pre_Interpolate
	///////////////////////////////////////
	double Lsq[3],pi180 = 180./acos(-1.0);
	int i;
	/////////////////////////////////////////////////////////////////////////////// phi
	for (i = 0; i<3; i++)
		Lsq[i] =	(Data[(i+1)%3].x - Data[i].x) * (Data[(i+1)%3].x - Data[i].x) +
					(Data[(i+1)%3].y - Data[i].y) * (Data[(i+1)%3].y - Data[i].y) +
					(Data[(i+1)%3].z - Data[i].z) * (Data[(i+1)%3].z - Data[i].z) 
	///////////////
	phi	= acos( (Lsq[0] - Lsq[1] - Lsq[2])/(2.*sqrt(Lsq[1]*Lsq[2]);
	phi *= pi180;				 	  	 	 
	/////////////////////////////////////////////////////////////////////////////// si
	si	= acos( (Lsq[1] - Lsq[0] - Lsq[2])/(2.*sqrt(Lsq[0]*Lsq[2]);
	si *= pi180;				 	  	 	 
	/////////////////
	return 0;
}

int CIn_Circle::NumberOfBezierControls(double theta, BOOL bClosed)
{
	// Closed: 3 equal 120 degree segments 
	int nSeg120,nCon;
	//////////////////////////////////////////// Full Circle
	if(bClosed)
	{
		nCon	= 6;
		////////////
		return nData;
	}
	//////////////////////////////////////////// Open Arc	 
	*nSeg120	= theta/120 + 1;
	nCon		= ((*nSeg120)<=2) ? 5 : 7;
	////////////////	
	return nCon;
}
	
int CIn_Circle::GetNewPtOnCircle(pWORLD DOld, double theta, WORLD Center, pWORLD DNew) 
{
	
	///////////////
	C3DMath	Math3D;
	CXForm	XForm(TRUE);	// Parallel
	///////////////////////////////////////
	MATRIX Rot;
	pMATRIX pRot = &Rot;  
	Math3D.GetIdentityMATRIX(pRot);
	//////////////////////////////////////// Translate Center & DOld to Origin
	XForm.Translate(pRot, -Center.x, -Center.y, -Center.z, XF_REPLACE);	
	////////////
	WORLD CO,D0;
	XForm.Transform(&Center, &C0, pRot);
	XForm.Transform(&DOld, &D0, pRot);
	//////////////////////////////////////// Normal to plane of Circle
	WORLD wN;
	Math3D.Cross3DPts(&CO,&D0,&wN);
	//////////////////////////////////////// Rotate about Normal theta deg to get D1
	Math3D.GetIdentityMATRIX(pRot);
	////////////
	WORLD Origin = {0.0,0.0,0.0}; 
	XForm.RotateAboutLineMATRIX(pRot, &Origin,&wN,theta);
	////////////
	WORLD D1;
	XForm.Transform(&D0, &D1, pRot);
	//////////////////////////////////////// Translate Data Back: New Pt
	XForm.Translate(pRot, Center.x, Center.y, Center.z, XF_REPLACE);	
	XForm.Transform(&D1, DNew, pRot);
	/////////////////////////////////
	return 0;
}	
	
int CIn_Circle::FillUpBezier_Closed(pWORLD Data, double theta, WORLD Center,
											pWORLD Con, pDOUBLE Wts,int nCon) 
{
	
	////////////////////////////////////////////////////////// Junctions
	Con[0].x 	= Data[0].x;
	Con[0].y 	= Data[0].y;
	Con[0].z 	= Data[0].z;
	Wts[0] 		= 1.;
	/////////////////////
	GetNewPtOnCircle(&(Data[0]), 120, Center, &(Con[2]);	// 120 degree rotated 
	Wts[2] 		= 1.;
	GetNewPtOnCircle(&(Con[2]) , 120, Center, &(Con[4]);	// 120 degree rotated 
	Wts[4] 		= 1.;
	////////////////////////////////////////////////////////// In-Betweens Cons/Wts
	for(k=0;k<3;k++)
	{
		int Lt2 = 2*k;                        
		Compute_b1_w1(Center,Con[Lt2],Con[Lt2+2)],Rad,
						&(Con[Lt2+1]),&(Wts[Lt2+1]));
	}						
	//////////////////////////////////////////////////// View Matrices
#ifdef _DEBUG
	///////////////////////////////////////
	CDrGrafDoc* pDoc 		= ((CDrGrafApp*)AfxGetApp())->GetDocument();
	CObjectMgr* pObjectMgr 	= pDoc->GetObjectMgr();
	///////////////////////////////////////////////
	if(pObjectMgr->GetMessage(12,1) ) // iDLL = 12 , Module = 1
	{
		CString* str = new CString;
		char* buf = str->GetBuffer(BUFF_SIZE);
		////////////////////
		int j,k;
		//////////
		sprintf(buf,"FillUpBezier:CLOSED");
		AfxMessageBox(*str);
		///////////////////
		j = sprintf(buf,"BezierCons_CLOSED[%d]\n      X             Y            Z\n",nCon);
		for(k=0;k<nCon;k++)
		{
		   j += sprintf( buf + j, "%2d %7.2f %7.2f %7.2f\n", k,
		   							Con[k].x,Con[k].y,Con[k].z );
		}
		if(j>BUFF_SIZE)
		{
			 sprintf( buf, "Increase buffer to %d",j);
			 AfxMessageBox(*str);
			 delete str;
			 return -1;
		}	 
		AfxMessageBox(*str);
		///////////////////
		delete str;
	}		
#endif				
	/////////////
	return 0;
}

int CIn_Circle::FillUpBezier_Open(pWORLD Data, double theta, WORLD Center,
										pWORLD Con, pDOUBLE Wts,int nCon) 
{
	
	///////////////////////////////////////////////// theta<120
	if(theta<=120)
	{
		///////////////////////////////////////////// Junctions
		for(k=0;k<3;k++)                        
		{                                                                     
			Con[2*k].x 	= Data[k].x;
			Con[2*k].y 	= Data[k].y; 
			Con[2*k].z 	= Data[k].z;
			Wts[2*k]	= 1.0		
		}
		////////////////////////////////////////////////////////// In-Betweens Cons/Wts
		for(k=0;k<2;k++)
		{
			int Lt2 = 2*k;                        
			Compute_b1_w1(Center,Con[Lt2],Con[Lt2+2)],Rad,
							&(Con[Lt2+1]),&(Wts[Lt2+1]));
		}
	}	
	else
	if(theta>120 && theta<=240)
	{
		///////////////////////////////////////////// Junctions:Ist
		Con[0].x 	= Data[0].x;
		Con[0].y 	= Data[0].y;
		Con[0].z 	= Data[0].z;
		Wts[0]		= 1.;
		///////////////////////////////////////////// Junctions:2nd
		GetNewPtOnCircle(&(Con[0]), 120, Center, &(Con[2]);	// 120 degree rotated 
		Wts[2] 		= 1.;
		///////////////////////////////////////////// Junctions:Last
		Con[4].x 	= Data[2].x;
		Con[4].y 	= Data[2].y;
		Con[4].z 	= Data[2].z;
		Wts[4] 		= 1.;
		////////////////////////////////////////////////////////// In-Betweens Cons/Wts
		for(k=0;k<2;k++)
		{
			int Lt2 = 2*k;                        
			Compute_b1_w1(Center,Con[Lt2],Con[Lt2+2)],Rad,
							&(Con[Lt2+1]),&(Wts[Lt2+1]));
		}						
	}		
	else
	if(theta>240)
	{
		///////////////////////////////////////////// Junctions:Ist
		Con[0].x 	= Data[0].x;
		Con[0].y 	= Data[0].y;
		Con[0].z 	= Data[0].z;
		Wts[0]		= 1.;
		///////////////////////////////////////////// Junctions:2nd
		GetNewPtOnCircle(&(Con[0]), 120, Center, &(Con[2]);	// 120 degree rotated 
		Wts[2] 		= 1.;
		///////////////////////////////////////////// Junctions:3rd
		GetNewPtOnCircle(&(Con[2]), 120, Center, &(Con[4]);	// 120 degree rotated 
		Wts[4] 		= 1.;
		///////////////////////////////////////////// Junctions:Last
		Con[6].x 	= Data[2].x;
		Con[6].y 	= Data[2].y;
		Con[6].z 	= Data[2].z;
		Wts[6] 		= 1.;
		////////////////////////////////////////////////////////// In-Betweens Cons/Wts
		for(k=0;k<3;k++)
		{
			int Lt2 = 2*k;                        
			Compute_b1_w1(Center,Con[Lt2],Con[Lt2+2)],Rad,
							&(Con[Lt2+1]),&(Wts[Lt2+1]));
		}						
	}		
	//////////////////////////////////////////////////// View Matrices
#ifdef _DEBUG
	///////////////////////////////////////
	CDrGrafDoc* pDoc 		= ((CDrGrafApp*)AfxGetApp())->GetDocument();
	CObjectMgr* pObjectMgr 	= pDoc->GetObjectMgr();
	///////////////////////////////////////////////
	if(pObjectMgr->GetMessage(12,1) ) // iDLL = 12 , Module = 1
	{
		CString* str = new CString;
		char* buf = str->GetBuffer(BUFF_SIZE);
		////////////////////
		int j,k;
		//////////
		sprintf(buf,"FillUpBezier:OPEN");
		AfxMessageBox(*str);
		///////////////////
		j = sprintf(buf,"ConsOPEN[%d]\n      X             Y            Z\n",nCon);
		for(k=0;k<nCon;k++)
		{
		   j += sprintf( buf + j, "%2d %7.2f %7.2f %7.2f\n", k,
		   							Con[k].x,Con[k].y,Con[k].z );
		}
		if(j>BUFF_SIZE)
		{
			 sprintf( buf, "Increase buffer to %d",j);
			 AfxMessageBox(*str);
			 delete str;
			 return -1;
		}	 
		AfxMessageBox(*str);
		///////////////////
		delete str;
	}		
#endif				
	/////////
	return 0;
}

int CIn_Circle::Compute_b1_w1(WORLD Center,WORLD b0,WORLD b2,double Rad,
									pWORLD pb1,pDOUBLE pw1)
{

	// To find:
	//		b1	= Bezier In-Betwen Pt.
	//			= Intersection of Tangents at b0 and b2
	// and
	//		w1	= Weight at b1
	//////////////////////////////////////////////////////// MidPt of Chord
	double w1;
	WORLD Rm;
	////////////
	Rm.x = b2.x - b0.x;
	Rm.y = b2.y - b0.y;
	Rm.z = b2.z - b0.z;
	//////////////////////////////////////////////////////// normal
	WORLD N;
	//////////
	N.x = Rm.x - Center.x;									
	N.y = Rm.y - Center.y;									
	N.z = Rm.z - Center.z;
	double Base = sqrt(N.x*N.x + N.y*N.y + N.z*N.z );
	//////////////////////////////////////////////////////// Weight = cos(alfa) 
	w1 = Base/Rad;
	//////////////////////////////////////////////////////// Bezier In-Between Pt
	//////////////////////////////// Unit Normal 
	Base = 1./Base;
	N.x *= Base;									
	N.y *= Base;									
	N.z *= Base;
	////////////// Rad/cos(alfa) = length from center to b1
	Base = Rad/w1;
	////////////////////////////////
	pb1->x 	= Center.x + Base * N.x; 
	pb1->y 	= Center.y + Base * N.y; 
	pb1->z 	= Center.z + Base * N.z;
	*pw1	= w1; 
	//////////////////////////////
	return 0;
	
}
	 					   	 
void CIn_Circle::Serialize(CArchive& ar)
{

	CObject::Serialize( ar);              // must call base class Serializer
	/////////////////////////
	////////////////////////////
	if (ar.IsStoring())
	{
		TRACE(" CIn_Circle:    Storing\n");	
		
 			/////////////////////////////////////////////////
 			//////////////////////////////

	}
	else
	{
		TRACE(" CIn_Circle:    Loading\n");	

			/////////////////////////////////////////////////
 		//////////////////////////////
	
	}        
	//////////////////
}
///////////////////////////////////// end of Module //////////////////////
